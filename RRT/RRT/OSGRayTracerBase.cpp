/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RayTracer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERAYTRACERINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>
#include "boost/bind.hpp"

#include <OSGConfig.h>



#include <OSGNode.h> // RayTracingRoot Class
#include <OSGNode.h> // BackgroundRoot Class

#include "OSGRayTracerBase.h"
#include "OSGRayTracer.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RayTracer
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var NodePtr         RayTracerBase::_sfRayTracingRoot
    
*/

/*! \var NodePtr         RayTracerBase::_sfBackgroundRoot
    
*/

/*! \var UInt32          RayTracerBase::_sfWidth
    
*/

/*! \var UInt32          RayTracerBase::_sfHeight
    
*/


void RayTracerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(),
        "RayTracingRoot",
        "",
        RayTracingRootFieldId, RayTracingRootFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RayTracerBase::editHandleRayTracingRoot),
        static_cast<FieldGetMethodSig >(&RayTracerBase::getHandleRayTracingRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(),
        "BackgroundRoot",
        "",
        BackgroundRootFieldId, BackgroundRootFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RayTracerBase::editHandleBackgroundRoot),
        static_cast<FieldGetMethodSig >(&RayTracerBase::getHandleBackgroundRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RayTracerBase::editHandleWidth),
        static_cast<FieldGetMethodSig >(&RayTracerBase::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RayTracerBase::editHandleHeight),
        static_cast<FieldGetMethodSig >(&RayTracerBase::getHandleHeight));

    oType.addInitialDesc(pDesc);
}


RayTracerBase::TypeObject RayTracerBase::_type(
    RayTracerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &RayTracerBase::createEmpty,
    RayTracer::initMethod,
    (InitalInsertDescFunc) &RayTracerBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"RayTracer\"\n"
    "    parent=\"FieldBundle\"\n"
    "    library=\"ContribRRT\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    libnamespace=\"OSG\"\n"
    ">\n"
    "    <Field\n"
    "        name=\"RayTracingRoot\"\n"
    "        type=\"NodePtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"BackgroundRoot\"\n"
    "        type=\"NodePtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\t<Field\n"
    "\t\tname=\"width\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"height\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &RayTracerBase::getType(void)
{
    return _type;
}

const FieldBundleType &RayTracerBase::getType(void) const
{
    return _type;
}

UInt32 RayTracerBase::getContainerSize(void) const
{
    return sizeof(RayTracer);
}

/*------------------------- decorator get ------------------------------*/


//! Get the RayTracer::_sfRayTracingRoot field.
const SFNodePtr *RayTracerBase::getSFRayTracingRoot(void) const
{
    return &_sfRayTracingRoot;
}

//! Get the RayTracer::_sfBackgroundRoot field.
const SFNodePtr *RayTracerBase::getSFBackgroundRoot(void) const
{
    return &_sfBackgroundRoot;
}

SFUInt32 *RayTracerBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt32 *RayTracerBase::getSFWidth(void) const
{
    return &_sfWidth;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *RayTracerBase::getSFWidth          (void)
{
    return this->editSFWidth          ();
}
#endif

SFUInt32 *RayTracerBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt32 *RayTracerBase::getSFHeight(void) const
{
    return &_sfHeight;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *RayTracerBase::getSFHeight         (void)
{
    return this->editSFHeight         ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 RayTracerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RayTracingRootFieldMask & whichField))
    {
        returnValue += _sfRayTracingRoot.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundRootFieldMask & whichField))
    {
        returnValue += _sfBackgroundRoot.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }

    return returnValue;
}

void RayTracerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RayTracingRootFieldMask & whichField))
    {
        _sfRayTracingRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundRootFieldMask & whichField))
    {
        _sfBackgroundRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
}

void RayTracerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RayTracingRootFieldMask & whichField))
    {
        _sfRayTracingRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundRootFieldMask & whichField))
    {
        _sfBackgroundRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
RayTracerP RayTracerBase::createEmpty(void)
{
    RayTracerP returnValue;

    newPtr<RayTracer>(returnValue);

    return returnValue;
}

FieldBundleP RayTracerBase::shallowCopy(void) const
{
    RayTracerP returnValue;

    newPtr(returnValue, dynamic_cast<const RayTracer *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

RayTracerBase::RayTracerBase(void) :
    Inherited(),
    _sfRayTracingRoot         (NullFC),
    _sfBackgroundRoot         (NullFC),
    _sfWidth                  (),
    _sfHeight                 ()
{
}

RayTracerBase::RayTracerBase(const RayTracerBase &source) :
    Inherited(source),
    _sfRayTracingRoot         (),
    _sfBackgroundRoot         (),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 )
{
}

/*-------------------------- destructors ----------------------------------*/

RayTracerBase::~RayTracerBase(void)
{
}

void RayTracerBase::onCreate(const RayTracer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setRayTracingRoot(source->getRayTracingRoot());

        this->setBackgroundRoot(source->getBackgroundRoot());
    }
}

void RayTracerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<RayTracer *>(this)->setRayTracingRoot(NullFC);

    static_cast<RayTracer *>(this)->setBackgroundRoot(NullFC);
}

GetFieldHandlePtr RayTracerBase::getHandleRayTracingRoot  (void) const
{
    SFNodePtr::GetHandlePtr returnValue(
        new  SFNodePtr::GetHandle(
             &_sfRayTracingRoot, 
             this->getType().getFieldDesc(RayTracingRootFieldId)));

    return returnValue;
}

EditFieldHandlePtr RayTracerBase::editHandleRayTracingRoot (void)
{
    SFNodePtr::EditHandlePtr returnValue(
        new  SFNodePtr::EditHandle(
             &_sfRayTracingRoot, 
             this->getType().getFieldDesc(RayTracingRootFieldId)));

    returnValue->setSetMethod(boost::bind(&RayTracer::setRayTracingRoot, this, _1));

    editSField(RayTracingRootFieldMask);

    return returnValue;
}

GetFieldHandlePtr RayTracerBase::getHandleBackgroundRoot  (void) const
{
    SFNodePtr::GetHandlePtr returnValue(
        new  SFNodePtr::GetHandle(
             &_sfBackgroundRoot, 
             this->getType().getFieldDesc(BackgroundRootFieldId)));

    return returnValue;
}

EditFieldHandlePtr RayTracerBase::editHandleBackgroundRoot (void)
{
    SFNodePtr::EditHandlePtr returnValue(
        new  SFNodePtr::EditHandle(
             &_sfBackgroundRoot, 
             this->getType().getFieldDesc(BackgroundRootFieldId)));

    returnValue->setSetMethod(boost::bind(&RayTracer::setBackgroundRoot, this, _1));

    editSField(BackgroundRootFieldMask);

    return returnValue;
}

GetFieldHandlePtr RayTracerBase::getHandleWidth           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfWidth, 
             this->getType().getFieldDesc(WidthFieldId)));

    return returnValue;
}

EditFieldHandlePtr RayTracerBase::editHandleWidth          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfWidth, 
             this->getType().getFieldDesc(WidthFieldId)));

    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr RayTracerBase::getHandleHeight          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHeight, 
             this->getType().getFieldDesc(HeightFieldId)));

    return returnValue;
}

EditFieldHandlePtr RayTracerBase::editHandleHeight         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHeight, 
             this->getType().getFieldDesc(HeightFieldId)));

    editSField(HeightFieldMask);

    return returnValue;
}



#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RayTracerP>::_type("RayTracerP", "FieldBundleP");
#endif



OSG_END_NAMESPACE
