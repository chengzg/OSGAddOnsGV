/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RTImageTarget!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERTIMAGETARGETINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>
#include "boost/bind.hpp"

#include <OSGConfig.h>



#include <OSGImage.h> // Image Class

#include "OSGRTImageTargetBase.h"
#include "OSGRTImageTarget.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RTImageTarget
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var ImagePtr        RTImageTargetBase::_sfImage
    
*/


void RTImageTargetBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(),
        "image",
        "",
        ImageFieldId, ImageFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RTImageTargetBase::editHandleImage),
        static_cast<FieldGetMethodSig >(&RTImageTargetBase::getHandleImage));

    oType.addInitialDesc(pDesc);
}


RTImageTargetBase::TypeObject RTImageTargetBase::_type(
    RTImageTargetBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &RTImageTargetBase::createEmpty,
    RTImageTarget::initMethod,
    (InitalInsertDescFunc) &RTImageTargetBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"RTImageTarget\"\n"
    "    parent=\"RTTarget\"\n"
    "    library=\"ContribRRT\"\n"
    "    pointerfieldtypes=\"single\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    libnamespace=\"OSG\"\n"
    ">\n"
    "    <Field\n"
    "        name=\"image\"\n"
    "        type=\"ImagePtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &RTImageTargetBase::getType(void)
{
    return _type;
}

const FieldBundleType &RTImageTargetBase::getType(void) const
{
    return _type;
}

UInt32 RTImageTargetBase::getContainerSize(void) const
{
    return sizeof(RTImageTarget);
}

/*------------------------- decorator get ------------------------------*/


//! Get the RTImageTarget::_sfImage field.
const SFImagePtr *RTImageTargetBase::getSFImage(void) const
{
    return &_sfImage;
}





/*------------------------------ access -----------------------------------*/

UInt32 RTImageTargetBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }

    return returnValue;
}

void RTImageTargetBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }
}

void RTImageTargetBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
RTImageTargetP RTImageTargetBase::createEmpty(void)
{
    RTImageTargetP returnValue;

    newPtr<RTImageTarget>(returnValue);

    return returnValue;
}

FieldBundleP RTImageTargetBase::shallowCopy(void) const
{
    RTImageTargetP returnValue;

    newPtr(returnValue, dynamic_cast<const RTImageTarget *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

RTImageTargetBase::RTImageTargetBase(void) :
    Inherited(),
    _sfImage                  (NullFC)
{
}

RTImageTargetBase::RTImageTargetBase(const RTImageTargetBase &source) :
    Inherited(source),
    _sfImage                  ()
{
}

/*-------------------------- destructors ----------------------------------*/

RTImageTargetBase::~RTImageTargetBase(void)
{
}

void RTImageTargetBase::onCreate(const RTImageTarget *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setImage(source->getImage());
    }
}

void RTImageTargetBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<RTImageTarget *>(this)->setImage(NullFC);
}

GetFieldHandlePtr RTImageTargetBase::getHandleImage           (void) const
{
    SFImagePtr::GetHandlePtr returnValue(
        new  SFImagePtr::GetHandle(
             &_sfImage, 
             this->getType().getFieldDesc(ImageFieldId)));

    return returnValue;
}

EditFieldHandlePtr RTImageTargetBase::editHandleImage          (void)
{
    SFImagePtr::EditHandlePtr returnValue(
        new  SFImagePtr::EditHandle(
             &_sfImage, 
             this->getType().getFieldDesc(ImageFieldId)));

    returnValue->setSetMethod(boost::bind(&RTImageTarget::setImage, 
                                          static_cast<RTImageTarget *>(this), _1));

    editSField(ImageFieldMask);

    return returnValue;
}



OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RTImageTargetP>::_type("RTImageTargetP", "RTTargetP");
#endif

OSG_FIELDTRAITS_GETTYPE(RTImageTargetP)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, RTImageTargetP, SFFieldBundleP);


OSG_END_NAMESPACE
