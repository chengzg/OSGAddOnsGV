/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RRTStage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGRRTSTAGEBASE_H_
#define _OSGRRTSTAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribRRTDef.h"

#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGNodeFields.h" // BackgroundRoot type
#include "OSGTextureObjChunkFields.h" // TextureTarget type
#include "OSGUInt32Fields.h" // Width type
#include "OSGUInt32Fields.h" // Height type
#include "OSGBoolFields.h" // SplitThreads type
#include "OSGBoolFields.h" // Tiled type
#include "OSGRTCameraDecoratorFields.h" // RTCamera type

#include "OSGRRTStageFields.h"

OSG_BEGIN_NAMESPACE

class RRTStage;

//! \brief RRTStage Base Class.

class OSG_CONTRIBRRT_DLLMAPPING RRTStageBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(RRTStage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        BackgroundRootFieldId = Inherited::NextFieldId,
        TextureTargetFieldId = BackgroundRootFieldId + 1,
        WidthFieldId = TextureTargetFieldId + 1,
        HeightFieldId = WidthFieldId + 1,
        SplitThreadsFieldId = HeightFieldId + 1,
        TiledFieldId = SplitThreadsFieldId + 1,
        RTCameraFieldId = TiledFieldId + 1,
        NextFieldId = RTCameraFieldId + 1
    };

    static const OSG::BitVector BackgroundRootFieldMask =
        (TypeTraits<BitVector>::One << BackgroundRootFieldId);
    static const OSG::BitVector TextureTargetFieldMask =
        (TypeTraits<BitVector>::One << TextureTargetFieldId);
    static const OSG::BitVector WidthFieldMask =
        (TypeTraits<BitVector>::One << WidthFieldId);
    static const OSG::BitVector HeightFieldMask =
        (TypeTraits<BitVector>::One << HeightFieldId);
    static const OSG::BitVector SplitThreadsFieldMask =
        (TypeTraits<BitVector>::One << SplitThreadsFieldId);
    static const OSG::BitVector TiledFieldMask =
        (TypeTraits<BitVector>::One << TiledFieldId);
    static const OSG::BitVector RTCameraFieldMask =
        (TypeTraits<BitVector>::One << RTCameraFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecNodePtr    SFBackgroundRootType;
    typedef SFUnrecTextureObjChunkPtr SFTextureTargetType;
    typedef SFUInt32          SFWidthType;
    typedef SFUInt32          SFHeightType;
    typedef SFBool            SFSplitThreadsType;
    typedef SFBool            SFTiledType;
    typedef SFUnrecRTCameraDecoratorPtr SFRTCameraType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecNodePtr      *getSFBackgroundRoot (void) const;
                  SFUnrecNodePtr      *editSFBackgroundRoot (void);
            const SFUnrecTextureObjChunkPtr *getSFTextureTarget  (void) const;
                  SFUnrecTextureObjChunkPtr *editSFTextureTarget  (void);

                  SFUInt32            *editSFWidth          (void);
            const SFUInt32            *getSFWidth           (void) const;

                  SFUInt32            *editSFHeight         (void);
            const SFUInt32            *getSFHeight          (void) const;

                  SFBool              *editSFSplitThreads   (void);
            const SFBool              *getSFSplitThreads    (void) const;

                  SFBool              *editSFTiled          (void);
            const SFBool              *getSFTiled           (void) const;
            const SFUnrecRTCameraDecoratorPtr *getSFRTCamera       (void) const;
                  SFUnrecRTCameraDecoratorPtr *editSFRTCamera       (void);


                  Node * getBackgroundRoot (void) const;

                  TextureObjChunk * getTextureTarget  (void) const;

                  UInt32              &editWidth          (void);
                  UInt32               getWidth           (void) const;

                  UInt32              &editHeight         (void);
                  UInt32               getHeight          (void) const;

                  bool                &editSplitThreads   (void);
                  bool                 getSplitThreads    (void) const;

                  bool                &editTiled          (void);
                  bool                 getTiled           (void) const;

                  RTCameraDecorator * getRTCamera       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setBackgroundRoot (Node * const value);
            void setTextureTarget  (TextureObjChunk * const value);
            void setWidth          (const UInt32 value);
            void setHeight         (const UInt32 value);
            void setSplitThreads   (const bool value);
            void setTiled          (const bool value);
            void setRTCamera       (RTCameraDecorator * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  RRTStageTransitPtr  create          (void);
    static  RRTStage           *createEmpty     (void);

    static  RRTStageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  RRTStage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecNodePtr    _sfBackgroundRoot;
    SFUnrecTextureObjChunkPtr _sfTextureTarget;
    SFUInt32          _sfWidth;
    SFUInt32          _sfHeight;
    SFBool            _sfSplitThreads;
    SFBool            _sfTiled;
    SFUnrecRTCameraDecoratorPtr _sfRTCamera;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    RRTStageBase(void);
    RRTStageBase(const RRTStageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~RRTStageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const RRTStage *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleBackgroundRoot  (void) const;
    EditFieldHandlePtr editHandleBackgroundRoot (void);
    GetFieldHandlePtr  getHandleTextureTarget   (void) const;
    EditFieldHandlePtr editHandleTextureTarget  (void);
    GetFieldHandlePtr  getHandleWidth           (void) const;
    EditFieldHandlePtr editHandleWidth          (void);
    GetFieldHandlePtr  getHandleHeight          (void) const;
    EditFieldHandlePtr editHandleHeight         (void);
    GetFieldHandlePtr  getHandleSplitThreads    (void) const;
    EditFieldHandlePtr editHandleSplitThreads   (void);
    GetFieldHandlePtr  getHandleTiled           (void) const;
    EditFieldHandlePtr editHandleTiled          (void);
    GetFieldHandlePtr  getHandleRTCamera        (void) const;
    EditFieldHandlePtr editHandleRTCamera       (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      RRTStageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const RRTStageBase &source);
};

typedef RRTStageBase *RRTStageBaseP;

typedef CoredNodeRefPtr  <RRTStage> RRTStageNodeRefPtr;
typedef CoredNodeMTRefPtr<RRTStage> RRTStageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGRRTSTAGEBASE_H_ */
