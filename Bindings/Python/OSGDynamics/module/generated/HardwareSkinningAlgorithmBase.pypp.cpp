// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif

#include "boost/python.hpp"
#include "OSGDynamics_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "HardwareSkinningAlgorithmBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct HardwareSkinningAlgorithmBase_wrapper : OSG::HardwareSkinningAlgorithmBase, bp::wrapper< OSG::HardwareSkinningAlgorithmBase > {

    virtual ::OSG::ActionBase::ResultE renderEnter( ::OSG::Action * pAction ){
        bp::override func_renderEnter = this->get_override( "renderEnter" );
        return func_renderEnter( boost::python::ptr(pAction) );
    }

    virtual ::OSG::ActionBase::ResultE renderLeave( ::OSG::Action * pAction ){
        bp::override func_renderLeave = this->get_override( "renderLeave" );
        return func_renderLeave( boost::python::ptr(pAction) );
    }

};

void register_HardwareSkinningAlgorithmBase_class(){

    { //::OSG::HardwareSkinningAlgorithmBase
        typedef bp::class_< HardwareSkinningAlgorithmBase_wrapper, bp::bases< OSG::SkinningAlgorithm >, boost::noncopyable > HardwareSkinningAlgorithmBase_exposer_t;
        HardwareSkinningAlgorithmBase_exposer_t HardwareSkinningAlgorithmBase_exposer = HardwareSkinningAlgorithmBase_exposer_t( "HardwareSkinningAlgorithmBase", bp::no_init );
        bp::scope HardwareSkinningAlgorithmBase_scope( HardwareSkinningAlgorithmBase_exposer );
        bp::scope().attr("ShaderDataFieldId") = (int)OSG::HardwareSkinningAlgorithmBase::ShaderDataFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::HardwareSkinningAlgorithmBase::NextFieldId;
        { //::OSG::HardwareSkinningAlgorithmBase::copyFromBin
        
            typedef void ( ::OSG::HardwareSkinningAlgorithmBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::HardwareSkinningAlgorithmBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::copyToBin
        
            typedef void ( ::OSG::HardwareSkinningAlgorithmBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::HardwareSkinningAlgorithmBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::create
        
            typedef ::OSG::HardwareSkinningAlgorithmTransitPtr ( *create_function_type )(  );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::HardwareSkinningAlgorithmBase::create ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::createDependent
        
            typedef ::OSG::HardwareSkinningAlgorithmTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::HardwareSkinningAlgorithmBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::createLocal
        
            typedef ::OSG::HardwareSkinningAlgorithmTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::HardwareSkinningAlgorithmBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getBinSize
        
            typedef ::OSG::UInt32 ( ::OSG::HardwareSkinningAlgorithmBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::HardwareSkinningAlgorithmBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::HardwareSkinningAlgorithmBase::getClassGroupId ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::HardwareSkinningAlgorithmBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::HardwareSkinningAlgorithmBase::getClassTypeId ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::HardwareSkinningAlgorithmBase::*getContainerSize_function_type )(  ) const;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::HardwareSkinningAlgorithmBase::getContainerSize ) );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getSFShaderData
        
            typedef ::OSG::SFUnrecShaderProgramVariableChunkPtr const * ( ::OSG::HardwareSkinningAlgorithmBase::*getSFShaderData_function_type )(  ) const;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getSFShaderData"
                , getSFShaderData_function_type( &::OSG::HardwareSkinningAlgorithmBase::getSFShaderData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getShaderData
        
            typedef ::OSG::ShaderProgramVariableChunk * ( ::OSG::HardwareSkinningAlgorithmBase::*getShaderData_function_type )(  ) const;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getShaderData"
                , getShaderData_function_type( &::OSG::HardwareSkinningAlgorithmBase::getShaderData )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::HardwareSkinningAlgorithmBase::*getType_function_type )(  ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HardwareSkinningAlgorithmBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::HardwareSkinningAlgorithmBase::*getType_function_type )(  ) const;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::HardwareSkinningAlgorithmBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::HardwareSkinningAlgorithmBase::setShaderData
        
            typedef void ( ::OSG::HardwareSkinningAlgorithmBase::*setShaderData_function_type )( ::OSG::ShaderProgramVariableChunk * const ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "setShaderData"
                , setShaderData_function_type( &::OSG::HardwareSkinningAlgorithmBase::setShaderData )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::SkinningAlgorithm::adjustVolume
        
            typedef void ( ::OSG::SkinningAlgorithm::*adjustVolume_function_type )( ::OSG::Volume & ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "adjustVolume"
                , adjustVolume_function_type( &::OSG::SkinningAlgorithm::adjustVolume )
                , ( bp::arg("volume") ) );
        
        }
        { //::OSG::Algorithm::renderEnter
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::Algorithm::*renderEnter_function_type )( ::OSG::Action * ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "renderEnter"
                , bp::pure_virtual( renderEnter_function_type(&::OSG::Algorithm::renderEnter) )
                , ( bp::arg("pAction") ) );
        
        }
        { //::OSG::Algorithm::renderLeave
        
            typedef ::OSG::ActionBase::ResultE ( ::OSG::Algorithm::*renderLeave_function_type )( ::OSG::Action * ) ;
            
            HardwareSkinningAlgorithmBase_exposer.def( 
                "renderLeave"
                , bp::pure_virtual( renderLeave_function_type(&::OSG::Algorithm::renderLeave) )
                , ( bp::arg("pAction") ) );
        
        }
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "create" );
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "createDependent" );
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "createLocal" );
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "getClassGroupId" );
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "getClassType" );
        HardwareSkinningAlgorithmBase_exposer.staticmethod( "getClassTypeId" );
    }

}
