// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ConnectionType.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_ConnectionType_class(){

    { //::OSG::ConnectionType
        typedef bp::class_< OSG::ConnectionType > ConnectionType_exposer_t;
        ConnectionType_exposer_t ConnectionType_exposer = ConnectionType_exposer_t( "ConnectionType", bp::no_init );
        bp::scope ConnectionType_scope( ConnectionType_exposer );
        ConnectionType_exposer.def( bp::init< OSG::ConnectionType const & >(( bp::arg("source") )) );
        { //::OSG::ConnectionType::createGroup
        
            typedef ::OSG::GroupConnection * ( ::OSG::ConnectionType::*createGroup_function_type )(  ) ;
            
            ConnectionType_exposer.def( 
                "createGroup"
                , createGroup_function_type( &::OSG::ConnectionType::createGroup )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::OSG::ConnectionType::createPoint
        
            typedef ::OSG::PointConnection * ( ::OSG::ConnectionType::*createPoint_function_type )(  ) ;
            
            ConnectionType_exposer.def( 
                "createPoint"
                , createPoint_function_type( &::OSG::ConnectionType::createPoint )
                , bp::return_value_policy< bp::manage_new_object >() );
        
        }
        { //::OSG::ConnectionType::getName
        
            typedef ::std::string ( ::OSG::ConnectionType::*getName_function_type )(  ) const;
            
            ConnectionType_exposer.def( 
                "getName"
                , getName_function_type( &::OSG::ConnectionType::getName ) );
        
        }
    }

}
