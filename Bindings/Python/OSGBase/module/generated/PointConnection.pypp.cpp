// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif

#include "boost/python.hpp"
#include "OSGBase_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "PointConnection.pypp.hpp"

using namespace std;
namespace bp = boost::python;

struct PointConnection_wrapper : OSG::PointConnection, bp::wrapper< OSG::PointConnection > {

    PointConnection_wrapper(int zeroCopyThreshold )
    : OSG::PointConnection( zeroCopyThreshold )
      , bp::wrapper< OSG::PointConnection >(){
        // constructor
    
    }

    virtual ::OSG::Int32 acceptGroup( ::OSG::Time timeout=-0x00000000000000001 ){
        bp::override func_acceptGroup = this->get_override( "acceptGroup" );
        return func_acceptGroup( timeout );
    }

    virtual ::OSG::Int32 connectGroup( ::std::string const & address, ::OSG::Time timeout=-0x00000000000000001 ){
        bp::override func_connectGroup = this->get_override( "connectGroup" );
        return func_connectGroup( address, timeout );
    }

    virtual void disconnect(  ){
        bp::override func_disconnect = this->get_override( "disconnect" );
        func_disconnect(  );
    }

    virtual ::OSG::ConnectionType const * getType(  ){
        bp::override func_getType = this->get_override( "getType" );
        return func_getType(  );
    }

    virtual void signal(  ) throw( OSG::ExceptionBinaryDataHandler::WriteError ){
        bp::override func_signal = this->get_override( "signal" );
        func_signal(  );
    }

    virtual bool wait( ::OSG::Time timeout=-0x00000000000000001 ) throw( OSG::ExceptionBinaryDataHandler::ReadError ){
        bp::override func_wait = this->get_override( "wait" );
        return func_wait( timeout );
    }

    virtual ::OSG::Int32 acceptPoint( ::OSG::Time timeout=-0x00000000000000001 ){
        bp::override func_acceptPoint = this->get_override( "acceptPoint" );
        return func_acceptPoint( timeout );
    }

    virtual ::std::string bind( ::std::string const & address="" ){
        bp::override func_bind = this->get_override( "bind" );
        return func_bind( address ).as<std::string>();
    }

    virtual ::OSG::Int32 connectPoint( ::std::string const & address, ::OSG::Time timeout=-0x00000000000000001 ){
        bp::override func_connectPoint = this->get_override( "connectPoint" );
        return func_connectPoint( address, timeout );
    }

    virtual ::OSG::Int32 selectChannel( ::OSG::Time timeout=-0x00000000000000001 ) throw( OSG::ExceptionBinaryDataHandler::ReadError ){
        bp::override func_selectChannel = this->get_override( "selectChannel" );
        return func_selectChannel( timeout );
    }

    virtual void setParams( ::std::string const & params ) {
        if( bp::override func_setParams = this->get_override( "setParams" ) )
            func_setParams( params );
        else{
            this->OSG::Connection::setParams( params );
        }
    }
    
    void default_setParams( ::std::string const & params ) {
        OSG::Connection::setParams( params );
    }

};

void register_PointConnection_class(){

    { //::OSG::PointConnection
        typedef bp::class_< PointConnection_wrapper, bp::bases< OSG::Connection >, boost::noncopyable > PointConnection_exposer_t;
        PointConnection_exposer_t PointConnection_exposer = PointConnection_exposer_t( "PointConnection", bp::init< int >(( bp::arg("zeroCopyThreshold") )) );
        bp::scope PointConnection_scope( PointConnection_exposer );
        { //::OSG::PointConnection::acceptGroup
        
            typedef ::OSG::Int32 ( ::OSG::PointConnection::*acceptGroup_function_type )( ::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "acceptGroup"
                , bp::pure_virtual( acceptGroup_function_type(&::OSG::PointConnection::acceptGroup) )
                , ( bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::PointConnection::connectGroup
        
            typedef ::OSG::Int32 ( ::OSG::PointConnection::*connectGroup_function_type )( ::std::string const &,::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "connectGroup"
                , bp::pure_virtual( connectGroup_function_type(&::OSG::PointConnection::connectGroup) )
                , ( bp::arg("address"), bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::PointConnection::disconnect
        
            typedef void ( ::OSG::PointConnection::*disconnect_function_type )(  ) ;
            
            PointConnection_exposer.def( 
                "disconnect"
                , bp::pure_virtual( disconnect_function_type(&::OSG::PointConnection::disconnect) ) );
        
        }
        { //::OSG::PointConnection::getType
        
            typedef ::OSG::ConnectionType const * ( ::OSG::PointConnection::*getType_function_type )(  ) ;
            
            PointConnection_exposer.def( 
                "getType"
                , bp::pure_virtual( getType_function_type(&::OSG::PointConnection::getType) )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::PointConnection::signal
        
            typedef void ( ::OSG::PointConnection::*signal_function_type )(  ) ;
            
            PointConnection_exposer.def( 
                "signal"
                , bp::pure_virtual( signal_function_type(&::OSG::PointConnection::signal) ) );
        
        }
        { //::OSG::PointConnection::wait
        
            typedef bool ( ::OSG::PointConnection::*wait_function_type )( ::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "wait"
                , bp::pure_virtual( wait_function_type(&::OSG::PointConnection::wait) )
                , ( bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::Connection::acceptPoint
        
            typedef ::OSG::Int32 ( ::OSG::Connection::*acceptPoint_function_type )( ::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "acceptPoint"
                , bp::pure_virtual( acceptPoint_function_type(&::OSG::Connection::acceptPoint) )
                , ( bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::Connection::bind
        
            typedef ::std::string ( ::OSG::Connection::*bind_function_type )( ::std::string const & ) ;
            
            PointConnection_exposer.def( 
                "bind"
                , bp::pure_virtual( bind_function_type(&::OSG::Connection::bind) )
                , ( bp::arg("address")="" ) );
        
        }
        { //::OSG::Connection::connectPoint
        
            typedef ::OSG::Int32 ( ::OSG::Connection::*connectPoint_function_type )( ::std::string const &,::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "connectPoint"
                , bp::pure_virtual( connectPoint_function_type(&::OSG::Connection::connectPoint) )
                , ( bp::arg("address"), bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::Connection::selectChannel
        
            typedef ::OSG::Int32 ( ::OSG::Connection::*selectChannel_function_type )( ::OSG::Time ) ;
            
            PointConnection_exposer.def( 
                "selectChannel"
                , bp::pure_virtual( selectChannel_function_type(&::OSG::Connection::selectChannel) )
                , ( bp::arg("timeout")=-0x00000000000000001 ) );
        
        }
        { //::OSG::Connection::setParams
        
            typedef void ( ::OSG::Connection::*setParams_function_type )( ::std::string const & ) ;
            typedef void ( PointConnection_wrapper::*default_setParams_function_type )( ::std::string const & ) ;
            
            PointConnection_exposer.def( 
                "setParams"
                , setParams_function_type(&::OSG::Connection::setParams)
                , default_setParams_function_type(&PointConnection_wrapper::default_setParams)
                , ( bp::arg("params") ) );
        
        }
    }

}
