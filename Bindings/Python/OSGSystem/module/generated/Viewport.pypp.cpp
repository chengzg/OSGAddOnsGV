// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "Viewport.pypp.hpp"

using namespace std;
namespace bp = boost::python;

void register_Viewport_class(){

    { //::OSG::Viewport
        typedef bp::class_< OSG::Viewport, bp::bases< OSG::ViewportBase >, OSG::Viewport::ObjRecPtr, boost::noncopyable > Viewport_exposer_t;
        Viewport_exposer_t Viewport_exposer = Viewport_exposer_t( "Viewport", bp::no_init );
        bp::scope Viewport_scope( Viewport_exposer );
        { //::OSG::Viewport::activateSize
        
            typedef void ( ::OSG::Viewport::*activateSize_function_type )(  ) ;
            
            Viewport_exposer.def( 
                "activateSize"
                , activateSize_function_type( &::OSG::Viewport::activateSize ) );
        
        }
        { //::OSG::Viewport::changed
        
            typedef void ( ::OSG::Viewport::*changed_function_type )( ::OSG::ConstFieldMaskArg,::OSG::UInt32,::OSG::BitVector ) ;
            
            Viewport_exposer.def( 
                "changed"
                , changed_function_type( &::OSG::Viewport::changed )
                , ( bp::arg("whichField"), bp::arg("origin"), bp::arg("detail") ) );
        
        }
        { //::OSG::Viewport::dump
        
            typedef void ( ::OSG::Viewport::*dump_function_type )( ::OSG::UInt32,long unsigned int const ) const;
            
            Viewport_exposer.def( 
                "dump"
                , dump_function_type( &::OSG::Viewport::dump )
                , ( bp::arg("uiIndent")=(::OSG::UInt32)(0), bp::arg("bvFlags")=(long unsigned int const)(0) ) );
        
        }
        { //::OSG::Viewport::getParent
        
            typedef ::OSG::Window * ( ::OSG::Viewport::*getParent_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getParent"
                , getParent_function_type( &::OSG::Viewport::getParent )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Viewport::getPixelBottom
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelBottom_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelBottom"
                , getPixelBottom_function_type( &::OSG::Viewport::getPixelBottom ) );
        
        }
        { //::OSG::Viewport::getPixelHeight
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelHeight_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelHeight"
                , getPixelHeight_function_type( &::OSG::Viewport::getPixelHeight ) );
        
        }
        { //::OSG::Viewport::getPixelLeft
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelLeft_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelLeft"
                , getPixelLeft_function_type( &::OSG::Viewport::getPixelLeft ) );
        
        }
        { //::OSG::Viewport::getPixelRight
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelRight_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelRight"
                , getPixelRight_function_type( &::OSG::Viewport::getPixelRight ) );
        
        }
        { //::OSG::Viewport::getPixelTop
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelTop_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelTop"
                , getPixelTop_function_type( &::OSG::Viewport::getPixelTop ) );
        
        }
        { //::OSG::Viewport::getPixelWidth
        
            typedef ::OSG::Int32 ( ::OSG::Viewport::*getPixelWidth_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "getPixelWidth"
                , getPixelWidth_function_type( &::OSG::Viewport::getPixelWidth ) );
        
        }
        { //::OSG::Viewport::getTarget
        
            typedef ::OSG::FrameBufferObject * ( ::OSG::Viewport::*getTarget_function_type )(  ) ;
            
            Viewport_exposer.def( 
                "getTarget"
                , getTarget_function_type( &::OSG::Viewport::getTarget )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Viewport::getTravValidator
        
            typedef ::OSG::TraversalValidator * ( ::OSG::Viewport::*getTravValidator_function_type )(  ) ;
            
            Viewport_exposer.def( 
                "getTravValidator"
                , getTravValidator_function_type( &::OSG::Viewport::getTravValidator )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::Viewport::isFullWindow
        
            typedef bool ( ::OSG::Viewport::*isFullWindow_function_type )(  ) const;
            
            Viewport_exposer.def( 
                "isFullWindow"
                , isFullWindow_function_type( &::OSG::Viewport::isFullWindow ) );
        
        }
        { //::OSG::Viewport::isPassive
        
            typedef bool ( ::OSG::Viewport::*isPassive_function_type )(  ) ;
            
            Viewport_exposer.def( 
                "isPassive"
                , isPassive_function_type( &::OSG::Viewport::isPassive ) );
        
        }
        { //::OSG::Viewport::render
        
            typedef void ( ::OSG::Viewport::*render_function_type )( ::OSG::RenderActionBase * ) ;
            
            Viewport_exposer.def( 
                "render"
                , render_function_type( &::OSG::Viewport::render )
                , ( bp::arg("action") ) );
        
        }
        { //::OSG::Viewport::setSize
        
            typedef void ( ::OSG::Viewport::*setSize_function_type )( ::OSG::Real32,::OSG::Real32,::OSG::Real32,::OSG::Real32 ) ;
            
            Viewport_exposer.def( 
                "setSize"
                , setSize_function_type( &::OSG::Viewport::setSize )
                , ( bp::arg("left"), bp::arg("bottom"), bp::arg("right"), bp::arg("top") ) );
        
        }
        pyopensg::register_transit< OSG::Viewport >::execute();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewport* >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::Viewport::ObjCPtr >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::AttachmentContainer* >();
        bp::implicitly_convertible< OSG::Viewport::ObjRecPtr, OSG::AttachmentContainer::ObjRecPtr >();
        bp::implicitly_convertible<OSG::Viewport::ObjRecPtr, OSG::AttachmentContainer::ObjCPtr>();
        Viewport_exposer.def("getNormalizedCoordinates",osgwrap::getNormalizedCoordinates);
    }

}
