// This file has been generated by Py++.


// PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
//
// This file is part of PyOpenSG.
//
// PyOpenSG is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option)
// any later version.
//
// PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
// more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#if __GNUC__ >= 4 || __GNUC_MINOR__ >=3
#pragma GCC diagnostic warning "-Wold-style-cast"
#endif

#include "boost/python.hpp"
#include "OSGSystem_mainheader.h"
#include "OsgPtrHelpers.h"
#include "boost/python/suite/indexing/map_indexing_suite.hpp"
#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
#include "ViewportBase.pypp.hpp"

using namespace std;
namespace bp = boost::python;

boost::python::list ViewportBase_getMFForegrounds(OSG::ViewportBase *self)
{
   boost::python::list result;
   OSG::MFUnrecForegroundPtr const * mf_data = self->getMFForegrounds();
   const OSG::UInt32 size(mf_data->size());
   for ( OSG::UInt32 i = 0; i < size; ++i )
   {
      result.append(OSG::Foreground::ObjRecPtr((*mf_data)[i]));
   }
   return result;
}

void register_ViewportBase_class(){

    { //::OSG::ViewportBase
        typedef bp::class_< OSG::ViewportBase, bp::bases< ::OSG::AttachmentContainer >, boost::noncopyable > ViewportBase_exposer_t;
        ViewportBase_exposer_t ViewportBase_exposer = ViewportBase_exposer_t( "ViewportBase", bp::no_init );
        bp::scope ViewportBase_scope( ViewportBase_exposer );
        bp::scope().attr("LeftFieldId") = (int)OSG::ViewportBase::LeftFieldId;
        bp::scope().attr("RightFieldId") = (int)OSG::ViewportBase::RightFieldId;
        bp::scope().attr("BottomFieldId") = (int)OSG::ViewportBase::BottomFieldId;
        bp::scope().attr("TopFieldId") = (int)OSG::ViewportBase::TopFieldId;
        bp::scope().attr("ParentFieldId") = (int)OSG::ViewportBase::ParentFieldId;
        bp::scope().attr("CameraFieldId") = (int)OSG::ViewportBase::CameraFieldId;
        bp::scope().attr("RootFieldId") = (int)OSG::ViewportBase::RootFieldId;
        bp::scope().attr("BackgroundFieldId") = (int)OSG::ViewportBase::BackgroundFieldId;
        bp::scope().attr("ForegroundsFieldId") = (int)OSG::ViewportBase::ForegroundsFieldId;
        bp::scope().attr("TravMaskFieldId") = (int)OSG::ViewportBase::TravMaskFieldId;
        bp::scope().attr("DrawTimeFieldId") = (int)OSG::ViewportBase::DrawTimeFieldId;
        bp::scope().attr("DrawableIdFieldId") = (int)OSG::ViewportBase::DrawableIdFieldId;
        bp::scope().attr("RenderOptionsFieldId") = (int)OSG::ViewportBase::RenderOptionsFieldId;
        bp::scope().attr("NextFieldId") = (int)OSG::ViewportBase::NextFieldId;
        { //::OSG::ViewportBase::addForeground
        
            typedef void ( ::OSG::ViewportBase::*addForeground_function_type )( ::OSG::Foreground * const ) ;
            
            ViewportBase_exposer.def( 
                "addForeground"
                , addForeground_function_type( &::OSG::ViewportBase::addForeground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::assignForegrounds
        
            typedef void ( ::OSG::ViewportBase::*assignForegrounds_function_type )( ::OSG::MFUnrecForegroundPtr const & ) ;
            
            ViewportBase_exposer.def( 
                "assignForegrounds"
                , assignForegrounds_function_type( &::OSG::ViewportBase::assignForegrounds )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::clearForegrounds
        
            typedef void ( ::OSG::ViewportBase::*clearForegrounds_function_type )(  ) ;
            
            ViewportBase_exposer.def( 
                "clearForegrounds"
                , clearForegrounds_function_type( &::OSG::ViewportBase::clearForegrounds ) );
        
        }
        { //::OSG::ViewportBase::copyFromBin
        
            typedef void ( ::OSG::ViewportBase::*copyFromBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ViewportBase_exposer.def( 
                "copyFromBin"
                , copyFromBin_function_type( &::OSG::ViewportBase::copyFromBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewportBase::copyToBin
        
            typedef void ( ::OSG::ViewportBase::*copyToBin_function_type )( ::OSG::BinaryDataHandler &,::OSG::ConstFieldMaskArg ) ;
            
            ViewportBase_exposer.def( 
                "copyToBin"
                , copyToBin_function_type( &::OSG::ViewportBase::copyToBin )
                , ( bp::arg("pMem"), bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewportBase::create
        
            typedef ::OSG::ViewportTransitPtr ( *create_function_type )(  );
            
            ViewportBase_exposer.def( 
                "create"
                , create_function_type( &::OSG::ViewportBase::create ) );
        
        }
        { //::OSG::ViewportBase::createDependent
        
            typedef ::OSG::ViewportTransitPtr ( *createDependent_function_type )( ::OSG::BitVector );
            
            ViewportBase_exposer.def( 
                "createDependent"
                , createDependent_function_type( &::OSG::ViewportBase::createDependent )
                , ( bp::arg("bFlags") ) );
        
        }
        { //::OSG::ViewportBase::createLocal
        
            typedef ::OSG::ViewportTransitPtr ( *createLocal_function_type )( ::OSG::BitVector );
            
            ViewportBase_exposer.def( 
                "createLocal"
                , createLocal_function_type( &::OSG::ViewportBase::createLocal )
                , ( bp::arg("bFlags")=(::OSG::BitVector)(OSG::FCLocal::All) ) );
        
        }
        { //::OSG::ViewportBase::getBackground
        
            typedef ::OSG::Background * ( ::OSG::ViewportBase::*getBackground_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getBackground"
                , getBackground_function_type( &::OSG::ViewportBase::getBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getBinSize
        
            typedef ::OSG::UInt32 ( ::OSG::ViewportBase::*getBinSize_function_type )( ::OSG::ConstFieldMaskArg ) ;
            
            ViewportBase_exposer.def( 
                "getBinSize"
                , getBinSize_function_type( &::OSG::ViewportBase::getBinSize )
                , ( bp::arg("whichField") ) );
        
        }
        { //::OSG::ViewportBase::getBottom
        
            typedef ::OSG::Real32 ( ::OSG::ViewportBase::*getBottom_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getBottom"
                , getBottom_function_type( &::OSG::ViewportBase::getBottom ) );
        
        }
        { //::OSG::ViewportBase::getCamera
        
            typedef ::OSG::Camera * ( ::OSG::ViewportBase::*getCamera_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getCamera"
                , getCamera_function_type( &::OSG::ViewportBase::getCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getClassGroupId
        
            typedef ::OSG::UInt16 ( *getClassGroupId_function_type )(  );
            
            ViewportBase_exposer.def( 
                "getClassGroupId"
                , getClassGroupId_function_type( &::OSG::ViewportBase::getClassGroupId ) );
        
        }
        { //::OSG::ViewportBase::getClassType
        
            typedef ::OSG::FieldContainerType & ( *getClassType_function_type )(  );
            
            ViewportBase_exposer.def( 
                "getClassType"
                , getClassType_function_type( &::OSG::ViewportBase::getClassType )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::OSG::ViewportBase::getClassTypeId
        
            typedef ::OSG::UInt32 ( *getClassTypeId_function_type )(  );
            
            ViewportBase_exposer.def( 
                "getClassTypeId"
                , getClassTypeId_function_type( &::OSG::ViewportBase::getClassTypeId ) );
        
        }
        { //::OSG::ViewportBase::getContainerSize
        
            typedef ::OSG::UInt32 ( ::OSG::ViewportBase::*getContainerSize_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getContainerSize"
                , getContainerSize_function_type( &::OSG::ViewportBase::getContainerSize ) );
        
        }
        { //::OSG::ViewportBase::getDrawTime
        
            typedef ::OSG::Real32 ( ::OSG::ViewportBase::*getDrawTime_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getDrawTime"
                , getDrawTime_function_type( &::OSG::ViewportBase::getDrawTime ) );
        
        }
        { //::OSG::ViewportBase::getDrawableId
        
            typedef ::OSG::Int32 ( ::OSG::ViewportBase::*getDrawableId_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getDrawableId"
                , getDrawableId_function_type( &::OSG::ViewportBase::getDrawableId ) );
        
        }
        { //::OSG::ViewportBase::getForegrounds
        
            typedef ::OSG::Foreground * ( ::OSG::ViewportBase::*getForegrounds_function_type )( ::OSG::UInt32 const ) const;
            
            ViewportBase_exposer.def( 
                "getForegrounds"
                , getForegrounds_function_type( &::OSG::ViewportBase::getForegrounds )
                , ( bp::arg("index") )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getLeft
        
            typedef ::OSG::Real32 ( ::OSG::ViewportBase::*getLeft_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getLeft"
                , getLeft_function_type( &::OSG::ViewportBase::getLeft ) );
        
        }
        { //::OSG::ViewportBase::getRenderOptions
        
            typedef ::OSG::RenderOptions * ( ::OSG::ViewportBase::*getRenderOptions_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getRenderOptions"
                , getRenderOptions_function_type( &::OSG::ViewportBase::getRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getRight
        
            typedef ::OSG::Real32 ( ::OSG::ViewportBase::*getRight_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getRight"
                , getRight_function_type( &::OSG::ViewportBase::getRight ) );
        
        }
        { //::OSG::ViewportBase::getRoot
        
            typedef ::OSG::Node * ( ::OSG::ViewportBase::*getRoot_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getRoot"
                , getRoot_function_type( &::OSG::ViewportBase::getRoot )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFBackground
        
            typedef ::OSG::SFUnrecBackgroundPtr const * ( ::OSG::ViewportBase::*getSFBackground_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFBackground"
                , getSFBackground_function_type( &::OSG::ViewportBase::getSFBackground )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFBottom
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewportBase::*getSFBottom_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFBottom"
                , getSFBottom_function_type( &::OSG::ViewportBase::getSFBottom )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFCamera
        
            typedef ::OSG::SFUnrecCameraPtr const * ( ::OSG::ViewportBase::*getSFCamera_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFCamera"
                , getSFCamera_function_type( &::OSG::ViewportBase::getSFCamera )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFDrawTime
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewportBase::*getSFDrawTime_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFDrawTime"
                , getSFDrawTime_function_type( &::OSG::ViewportBase::getSFDrawTime )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFDrawableId
        
            typedef ::OSG::SFInt32 const * ( ::OSG::ViewportBase::*getSFDrawableId_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFDrawableId"
                , getSFDrawableId_function_type( &::OSG::ViewportBase::getSFDrawableId )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFLeft
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewportBase::*getSFLeft_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFLeft"
                , getSFLeft_function_type( &::OSG::ViewportBase::getSFLeft )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFRenderOptions
        
            typedef ::OSG::SFUnrecRenderOptionsPtr const * ( ::OSG::ViewportBase::*getSFRenderOptions_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFRenderOptions"
                , getSFRenderOptions_function_type( &::OSG::ViewportBase::getSFRenderOptions )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFRight
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewportBase::*getSFRight_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFRight"
                , getSFRight_function_type( &::OSG::ViewportBase::getSFRight )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFRoot
        
            typedef ::OSG::SFUnrecNodePtr const * ( ::OSG::ViewportBase::*getSFRoot_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFRoot"
                , getSFRoot_function_type( &::OSG::ViewportBase::getSFRoot )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFTop
        
            typedef ::OSG::SFReal32 const * ( ::OSG::ViewportBase::*getSFTop_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFTop"
                , getSFTop_function_type( &::OSG::ViewportBase::getSFTop )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getSFTravMask
        
            typedef ::OSG::SFUInt32 const * ( ::OSG::ViewportBase::*getSFTravMask_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getSFTravMask"
                , getSFTravMask_function_type( &::OSG::ViewportBase::getSFTravMask )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getTop
        
            typedef ::OSG::Real32 ( ::OSG::ViewportBase::*getTop_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getTop"
                , getTop_function_type( &::OSG::ViewportBase::getTop ) );
        
        }
        { //::OSG::ViewportBase::getTravMask
        
            typedef ::OSG::UInt32 ( ::OSG::ViewportBase::*getTravMask_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getTravMask"
                , getTravMask_function_type( &::OSG::ViewportBase::getTravMask ) );
        
        }
        { //::OSG::ViewportBase::getType
        
            typedef ::OSG::FieldContainerType & ( ::OSG::ViewportBase::*getType_function_type )(  ) ;
            
            ViewportBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ViewportBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::getType
        
            typedef ::OSG::FieldContainerType const & ( ::OSG::ViewportBase::*getType_function_type )(  ) const;
            
            ViewportBase_exposer.def( 
                "getType"
                , getType_function_type( &::OSG::ViewportBase::getType )
                , bp::return_internal_reference< >() );
        
        }
        { //::OSG::ViewportBase::removeFromForegrounds
        
            typedef void ( ::OSG::ViewportBase::*removeFromForegrounds_function_type )( ::OSG::UInt32 ) ;
            
            ViewportBase_exposer.def( 
                "removeFromForegrounds"
                , removeFromForegrounds_function_type( &::OSG::ViewportBase::removeFromForegrounds )
                , ( bp::arg("uiIndex") ) );
        
        }
        { //::OSG::ViewportBase::removeObjFromForegrounds
        
            typedef void ( ::OSG::ViewportBase::*removeObjFromForegrounds_function_type )( ::OSG::Foreground * const ) ;
            
            ViewportBase_exposer.def( 
                "removeObjFromForegrounds"
                , removeObjFromForegrounds_function_type( &::OSG::ViewportBase::removeObjFromForegrounds )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setBackground
        
            typedef void ( ::OSG::ViewportBase::*setBackground_function_type )( ::OSG::Background * const ) ;
            
            ViewportBase_exposer.def( 
                "setBackground"
                , setBackground_function_type( &::OSG::ViewportBase::setBackground )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setBottom
        
            typedef void ( ::OSG::ViewportBase::*setBottom_function_type )( ::OSG::Real32 const ) ;
            
            ViewportBase_exposer.def( 
                "setBottom"
                , setBottom_function_type( &::OSG::ViewportBase::setBottom )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setCamera
        
            typedef void ( ::OSG::ViewportBase::*setCamera_function_type )( ::OSG::Camera * const ) ;
            
            ViewportBase_exposer.def( 
                "setCamera"
                , setCamera_function_type( &::OSG::ViewportBase::setCamera )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setDrawTime
        
            typedef void ( ::OSG::ViewportBase::*setDrawTime_function_type )( ::OSG::Real32 const ) ;
            
            ViewportBase_exposer.def( 
                "setDrawTime"
                , setDrawTime_function_type( &::OSG::ViewportBase::setDrawTime )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setDrawableId
        
            typedef void ( ::OSG::ViewportBase::*setDrawableId_function_type )( ::OSG::Int32 const ) ;
            
            ViewportBase_exposer.def( 
                "setDrawableId"
                , setDrawableId_function_type( &::OSG::ViewportBase::setDrawableId )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setLeft
        
            typedef void ( ::OSG::ViewportBase::*setLeft_function_type )( ::OSG::Real32 const ) ;
            
            ViewportBase_exposer.def( 
                "setLeft"
                , setLeft_function_type( &::OSG::ViewportBase::setLeft )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setRenderOptions
        
            typedef void ( ::OSG::ViewportBase::*setRenderOptions_function_type )( ::OSG::RenderOptions * const ) ;
            
            ViewportBase_exposer.def( 
                "setRenderOptions"
                , setRenderOptions_function_type( &::OSG::ViewportBase::setRenderOptions )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setRight
        
            typedef void ( ::OSG::ViewportBase::*setRight_function_type )( ::OSG::Real32 const ) ;
            
            ViewportBase_exposer.def( 
                "setRight"
                , setRight_function_type( &::OSG::ViewportBase::setRight )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setRoot
        
            typedef void ( ::OSG::ViewportBase::*setRoot_function_type )( ::OSG::Node * const ) ;
            
            ViewportBase_exposer.def( 
                "setRoot"
                , setRoot_function_type( &::OSG::ViewportBase::setRoot )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setTop
        
            typedef void ( ::OSG::ViewportBase::*setTop_function_type )( ::OSG::Real32 const ) ;
            
            ViewportBase_exposer.def( 
                "setTop"
                , setTop_function_type( &::OSG::ViewportBase::setTop )
                , ( bp::arg("value") ) );
        
        }
        { //::OSG::ViewportBase::setTravMask
        
            typedef void ( ::OSG::ViewportBase::*setTravMask_function_type )( ::OSG::UInt32 const ) ;
            
            ViewportBase_exposer.def( 
                "setTravMask"
                , setTravMask_function_type( &::OSG::ViewportBase::setTravMask )
                , ( bp::arg("value") ) );
        
        }
        ViewportBase_exposer.staticmethod( "create" );
        ViewportBase_exposer.staticmethod( "createDependent" );
        ViewportBase_exposer.staticmethod( "createLocal" );
        ViewportBase_exposer.staticmethod( "getClassGroupId" );
        ViewportBase_exposer.staticmethod( "getClassType" );
        ViewportBase_exposer.staticmethod( "getClassTypeId" );
        ViewportBase_exposer.def("getMFForegrounds",ViewportBase_getMFForegrounds);
    }

}
