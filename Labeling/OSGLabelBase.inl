/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Label!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &LabelBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 LabelBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 LabelBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Label::_sfPosition field.

inline
Pnt3f &LabelBase::editPosition(void)
{
    editSField(PositionFieldMask);

    return _sfPosition.getValue();
}

//! Get the value of the Label::_sfPosition field.
inline
const Pnt3f &LabelBase::getPosition(void) const
{
    return _sfPosition.getValue();
}

//! Set the value of the Label::_sfPosition field.
inline
void LabelBase::setPosition(const Pnt3f &value)
{
    editSField(PositionFieldMask);

    _sfPosition.setValue(value);
}
//! Get the value of the Label::_sfPixelOffset field.

inline
Vec2f &LabelBase::editPixelOffset(void)
{
    editSField(PixelOffsetFieldMask);

    return _sfPixelOffset.getValue();
}

//! Get the value of the Label::_sfPixelOffset field.
inline
const Vec2f &LabelBase::getPixelOffset(void) const
{
    return _sfPixelOffset.getValue();
}

//! Set the value of the Label::_sfPixelOffset field.
inline
void LabelBase::setPixelOffset(const Vec2f &value)
{
    editSField(PixelOffsetFieldMask);

    _sfPixelOffset.setValue(value);
}
//! Get the value of the Label::_sfOrientation field.

inline
Real32 &LabelBase::editOrientation(void)
{
    editSField(OrientationFieldMask);

    return _sfOrientation.getValue();
}

//! Get the value of the Label::_sfOrientation field.
inline
      Real32  LabelBase::getOrientation(void) const
{
    return _sfOrientation.getValue();
}

//! Set the value of the Label::_sfOrientation field.
inline
void LabelBase::setOrientation(const Real32 value)
{
    editSField(OrientationFieldMask);

    _sfOrientation.setValue(value);
}
//! Get the value of the Label::_sfHorizontalAlign field.

inline
UInt8 &LabelBase::editHorizontalAlign(void)
{
    editSField(HorizontalAlignFieldMask);

    return _sfHorizontalAlign.getValue();
}

//! Get the value of the Label::_sfHorizontalAlign field.
inline
      UInt8  LabelBase::getHorizontalAlign(void) const
{
    return _sfHorizontalAlign.getValue();
}

//! Set the value of the Label::_sfHorizontalAlign field.
inline
void LabelBase::setHorizontalAlign(const UInt8 value)
{
    editSField(HorizontalAlignFieldMask);

    _sfHorizontalAlign.setValue(value);
}
//! Get the value of the Label::_sfVerticalAlign field.

inline
UInt8 &LabelBase::editVerticalAlign(void)
{
    editSField(VerticalAlignFieldMask);

    return _sfVerticalAlign.getValue();
}

//! Get the value of the Label::_sfVerticalAlign field.
inline
      UInt8  LabelBase::getVerticalAlign(void) const
{
    return _sfVerticalAlign.getValue();
}

//! Set the value of the Label::_sfVerticalAlign field.
inline
void LabelBase::setVerticalAlign(const UInt8 value)
{
    editSField(VerticalAlignFieldMask);

    _sfVerticalAlign.setValue(value);
}
//! Get the value of the Label::_sfMargin field.

inline
Vec2f &LabelBase::editMargin(void)
{
    editSField(MarginFieldMask);

    return _sfMargin.getValue();
}

//! Get the value of the Label::_sfMargin field.
inline
const Vec2f &LabelBase::getMargin(void) const
{
    return _sfMargin.getValue();
}

//! Set the value of the Label::_sfMargin field.
inline
void LabelBase::setMargin(const Vec2f &value)
{
    editSField(MarginFieldMask);

    _sfMargin.setValue(value);
}
//! Get the value of the Label::_sfColor field.

inline
Color4f &LabelBase::editColor(void)
{
    editSField(ColorFieldMask);

    return _sfColor.getValue();
}

//! Get the value of the Label::_sfColor field.
inline
const Color4f &LabelBase::getColor(void) const
{
    return _sfColor.getValue();
}

//! Set the value of the Label::_sfColor field.
inline
void LabelBase::setColor(const Color4f &value)
{
    editSField(ColorFieldMask);

    _sfColor.setValue(value);
}
//! Get the value of the Label::_sfBgColor field.

inline
Color4f &LabelBase::editBgColor(void)
{
    editSField(BgColorFieldMask);

    return _sfBgColor.getValue();
}

//! Get the value of the Label::_sfBgColor field.
inline
const Color4f &LabelBase::getBgColor(void) const
{
    return _sfBgColor.getValue();
}

//! Set the value of the Label::_sfBgColor field.
inline
void LabelBase::setBgColor(const Color4f &value)
{
    editSField(BgColorFieldMask);

    _sfBgColor.setValue(value);
}
//! Get the value of the Label::_sfShadowColor field.

inline
Color4f &LabelBase::editShadowColor(void)
{
    editSField(ShadowColorFieldMask);

    return _sfShadowColor.getValue();
}

//! Get the value of the Label::_sfShadowColor field.
inline
const Color4f &LabelBase::getShadowColor(void) const
{
    return _sfShadowColor.getValue();
}

//! Set the value of the Label::_sfShadowColor field.
inline
void LabelBase::setShadowColor(const Color4f &value)
{
    editSField(ShadowColorFieldMask);

    _sfShadowColor.setValue(value);
}
//! Get the value of the Label::_sfShadowOffset field.

inline
Vec2f &LabelBase::editShadowOffset(void)
{
    editSField(ShadowOffsetFieldMask);

    return _sfShadowOffset.getValue();
}

//! Get the value of the Label::_sfShadowOffset field.
inline
const Vec2f &LabelBase::getShadowOffset(void) const
{
    return _sfShadowOffset.getValue();
}

//! Set the value of the Label::_sfShadowOffset field.
inline
void LabelBase::setShadowOffset(const Vec2f &value)
{
    editSField(ShadowOffsetFieldMask);

    _sfShadowOffset.setValue(value);
}
//! Get the value of the Label::_sfBorderColor field.

inline
Color4f &LabelBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the Label::_sfBorderColor field.
inline
const Color4f &LabelBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the Label::_sfBorderColor field.
inline
void LabelBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the Label::_sfBorderOffset field.

inline
Vec2f &LabelBase::editBorderOffset(void)
{
    editSField(BorderOffsetFieldMask);

    return _sfBorderOffset.getValue();
}

//! Get the value of the Label::_sfBorderOffset field.
inline
const Vec2f &LabelBase::getBorderOffset(void) const
{
    return _sfBorderOffset.getValue();
}

//! Set the value of the Label::_sfBorderOffset field.
inline
void LabelBase::setBorderOffset(const Vec2f &value)
{
    editSField(BorderOffsetFieldMask);

    _sfBorderOffset.setValue(value);
}
//! Get the value of the Label::_sfImportance field.

inline
Real32 &LabelBase::editImportance(void)
{
    editSField(ImportanceFieldMask);

    return _sfImportance.getValue();
}

//! Get the value of the Label::_sfImportance field.
inline
      Real32  LabelBase::getImportance(void) const
{
    return _sfImportance.getValue();
}

//! Set the value of the Label::_sfImportance field.
inline
void LabelBase::setImportance(const Real32 value)
{
    editSField(ImportanceFieldMask);

    _sfImportance.setValue(value);
}

//! Get the value of the Label::_sfTextureObject field.
inline
TextureObjChunk * LabelBase::getTextureObject(void) const
{
    return _sfTextureObject.getValue();
}

//! Set the value of the Label::_sfTextureObject field.
inline
void LabelBase::setTextureObject(TextureObjChunk * const value)
{
    editSField(TextureObjectFieldMask);

    _sfTextureObject.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void LabelBase::execSync (      LabelBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
        _sfPosition.syncWith(pFrom->_sfPosition);

    if(FieldBits::NoField != (PixelOffsetFieldMask & whichField))
        _sfPixelOffset.syncWith(pFrom->_sfPixelOffset);

    if(FieldBits::NoField != (OrientationFieldMask & whichField))
        _sfOrientation.syncWith(pFrom->_sfOrientation);

    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
        _sfHorizontalAlign.syncWith(pFrom->_sfHorizontalAlign);

    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
        _sfVerticalAlign.syncWith(pFrom->_sfVerticalAlign);

    if(FieldBits::NoField != (MarginFieldMask & whichField))
        _sfMargin.syncWith(pFrom->_sfMargin);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pFrom->_sfColor);

    if(FieldBits::NoField != (BgColorFieldMask & whichField))
        _sfBgColor.syncWith(pFrom->_sfBgColor);

    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
        _sfShadowColor.syncWith(pFrom->_sfShadowColor);

    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
        _sfShadowOffset.syncWith(pFrom->_sfShadowOffset);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
        _sfBorderOffset.syncWith(pFrom->_sfBorderOffset);

    if(FieldBits::NoField != (ImportanceFieldMask & whichField))
        _sfImportance.syncWith(pFrom->_sfImportance);

    if(FieldBits::NoField != (TextureObjectFieldMask & whichField))
        _sfTextureObject.syncWith(pFrom->_sfTextureObject);
}
#endif


inline
const Char8 *LabelBase::getClassname(void)
{
    return "Label";
}
OSG_GEN_CONTAINERPTR(Label);

OSG_END_NAMESPACE

