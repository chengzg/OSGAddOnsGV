/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DynamicTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDYNAMICTERRAININST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGImage.h> // HeightData Class
#include <OSGImage.h> // TextureData Class
#include <OSGTextureChunk.h> // HeightColorTexture Class

#include "OSGDynamicTerrainBase.h"
#include "OSGDynamicTerrain.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DynamicTerrain
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Int32           DynamicTerrainBase::_sfLevelSize
    
*/

/*! \var ImagePtr        DynamicTerrainBase::_sfHeightData
    
*/

/*! \var Real32          DynamicTerrainBase::_sfHeightDataScale
    
*/

/*! \var Real32          DynamicTerrainBase::_sfHeightDataOffset
    
*/

/*! \var Real32          DynamicTerrainBase::_sfSampleDistance
    
*/

/*! \var ImagePtr        DynamicTerrainBase::_sfTextureData
    
*/

/*! \var TextureChunkPtr DynamicTerrainBase::_sfHeightColorTexture
    
*/

/*! \var Int32           DynamicTerrainBase::_sfSampleUpdateBudget
    
*/

/*! \var bool            DynamicTerrainBase::_sfEnableFrustumCulling
    
*/

/*! \var bool            DynamicTerrainBase::_sfUseGpuRenderer
    
*/

/*! \var bool            DynamicTerrainBase::_sfUseVboExtension
    
*/

/*! \var bool            DynamicTerrainBase::_sfEnableSmoothTransition
    
*/

/*! \var bool            DynamicTerrainBase::_sfShowBoundingBoxes
    
*/

/*! \var bool            DynamicTerrainBase::_sfShowTransitionRegions
    
*/

/*! \var bool            DynamicTerrainBase::_sfDisableUpdate
    
*/

/*! \var std::string     DynamicTerrainBase::_sfCpuVertexProgram
    
*/

/*! \var std::string     DynamicTerrainBase::_sfCpuFragmentProgram
    
*/


void DynamicTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "levelSize",
        "",
        LevelSizeFieldId, LevelSizeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleLevelSize),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleLevelSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(),
        "heightData",
        "",
        HeightDataFieldId, HeightDataFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleHeightData),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleHeightData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "heightDataScale",
        "",
        HeightDataScaleFieldId, HeightDataScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleHeightDataScale),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleHeightDataScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "heightDataOffset",
        "",
        HeightDataOffsetFieldId, HeightDataOffsetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleHeightDataOffset),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleHeightDataOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "sampleDistance",
        "",
        SampleDistanceFieldId, SampleDistanceFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleSampleDistance),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleSampleDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(),
        "textureData",
        "",
        TextureDataFieldId, TextureDataFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleTextureData),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleTextureData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTextureChunkPtr::Description(
        SFTextureChunkPtr::getClassType(),
        "heightColorTexture",
        "",
        HeightColorTextureFieldId, HeightColorTextureFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleHeightColorTexture),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleHeightColorTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "sampleUpdateBudget",
        "",
        SampleUpdateBudgetFieldId, SampleUpdateBudgetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleSampleUpdateBudget),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleSampleUpdateBudget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enableFrustumCulling",
        "",
        EnableFrustumCullingFieldId, EnableFrustumCullingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleEnableFrustumCulling),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleEnableFrustumCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "useGpuRenderer",
        "",
        UseGpuRendererFieldId, UseGpuRendererFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleUseGpuRenderer),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleUseGpuRenderer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "useVboExtension",
        "",
        UseVboExtensionFieldId, UseVboExtensionFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleUseVboExtension),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleUseVboExtension));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enableSmoothTransition",
        "",
        EnableSmoothTransitionFieldId, EnableSmoothTransitionFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleEnableSmoothTransition),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleEnableSmoothTransition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "showBoundingBoxes",
        "",
        ShowBoundingBoxesFieldId, ShowBoundingBoxesFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleShowBoundingBoxes),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleShowBoundingBoxes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "showTransitionRegions",
        "",
        ShowTransitionRegionsFieldId, ShowTransitionRegionsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleShowTransitionRegions),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleShowTransitionRegions));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "disableUpdate",
        "",
        DisableUpdateFieldId, DisableUpdateFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleDisableUpdate),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleDisableUpdate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "cpuVertexProgram",
        "",
        CpuVertexProgramFieldId, CpuVertexProgramFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleCpuVertexProgram),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleCpuVertexProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "cpuFragmentProgram",
        "",
        CpuFragmentProgramFieldId, CpuFragmentProgramFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicTerrainBase::editHandleCpuFragmentProgram),
        static_cast<FieldGetMethodSig >(&DynamicTerrainBase::getHandleCpuFragmentProgram));

    oType.addInitialDesc(pDesc);
}


DynamicTerrainBase::TypeObject DynamicTerrainBase::_type(
    DynamicTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &DynamicTerrainBase::createEmpty,
    DynamicTerrain::initMethod,
    (InitalInsertDescFunc) &DynamicTerrainBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"DynamicTerrain\"\n"
    "\tparent=\"MaterialDrawable\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "  <Field\n"
    "\t\tname=\"levelSize\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"63\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"heightData\"\n"
    "\t\ttype=\"ImagePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"heightDataScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"1.0\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"heightDataOffset\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"0\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"sampleDistance\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"1.0\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"textureData\"\n"
    "\t\ttype=\"ImagePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>  \n"
    "  <Field\n"
    "\t\tname=\"heightColorTexture\"\n"
    "\t\ttype=\"TextureChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"sampleUpdateBudget\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"enableFrustumCulling\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"useGpuRenderer\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"false\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"useVboExtension\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"true\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"enableSmoothTransition\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"showBoundingBoxes\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"showTransitionRegions\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"false\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"disableUpdate\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"false\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"cpuVertexProgram\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"\"\n"
    "\t>\n"
    "  </Field>\n"
    "  <Field\n"
    "\t\tname=\"cpuFragmentProgram\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "    defaultValue=\"\"\n"
    "\t>\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DynamicTerrainBase::getType(void)
{
    return _type;
}

const FieldContainerType &DynamicTerrainBase::getType(void) const
{
    return _type;
}

UInt32 DynamicTerrainBase::getContainerSize(void) const
{
    return sizeof(DynamicTerrain);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *DynamicTerrainBase::editSFLevelSize(void)
{
    editSField(LevelSizeFieldMask);

    return &_sfLevelSize;
}

const SFInt32 *DynamicTerrainBase::getSFLevelSize(void) const
{
    return &_sfLevelSize;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *DynamicTerrainBase::getSFLevelSize      (void)
{
    return this->editSFLevelSize      ();
}
#endif

//! Get the DynamicTerrain::_sfHeightData field.
const SFImagePtr *DynamicTerrainBase::getSFHeightData(void) const
{
    return &_sfHeightData;
}

SFReal32 *DynamicTerrainBase::editSFHeightDataScale(void)
{
    editSField(HeightDataScaleFieldMask);

    return &_sfHeightDataScale;
}

const SFReal32 *DynamicTerrainBase::getSFHeightDataScale(void) const
{
    return &_sfHeightDataScale;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *DynamicTerrainBase::getSFHeightDataScale(void)
{
    return this->editSFHeightDataScale();
}
#endif

SFReal32 *DynamicTerrainBase::editSFHeightDataOffset(void)
{
    editSField(HeightDataOffsetFieldMask);

    return &_sfHeightDataOffset;
}

const SFReal32 *DynamicTerrainBase::getSFHeightDataOffset(void) const
{
    return &_sfHeightDataOffset;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *DynamicTerrainBase::getSFHeightDataOffset(void)
{
    return this->editSFHeightDataOffset();
}
#endif

SFReal32 *DynamicTerrainBase::editSFSampleDistance(void)
{
    editSField(SampleDistanceFieldMask);

    return &_sfSampleDistance;
}

const SFReal32 *DynamicTerrainBase::getSFSampleDistance(void) const
{
    return &_sfSampleDistance;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *DynamicTerrainBase::getSFSampleDistance (void)
{
    return this->editSFSampleDistance ();
}
#endif

//! Get the DynamicTerrain::_sfTextureData field.
const SFImagePtr *DynamicTerrainBase::getSFTextureData(void) const
{
    return &_sfTextureData;
}

//! Get the DynamicTerrain::_sfHeightColorTexture field.
const SFTextureChunkPtr *DynamicTerrainBase::getSFHeightColorTexture(void) const
{
    return &_sfHeightColorTexture;
}

SFInt32 *DynamicTerrainBase::editSFSampleUpdateBudget(void)
{
    editSField(SampleUpdateBudgetFieldMask);

    return &_sfSampleUpdateBudget;
}

const SFInt32 *DynamicTerrainBase::getSFSampleUpdateBudget(void) const
{
    return &_sfSampleUpdateBudget;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *DynamicTerrainBase::getSFSampleUpdateBudget(void)
{
    return this->editSFSampleUpdateBudget();
}
#endif

SFBool *DynamicTerrainBase::editSFEnableFrustumCulling(void)
{
    editSField(EnableFrustumCullingFieldMask);

    return &_sfEnableFrustumCulling;
}

const SFBool *DynamicTerrainBase::getSFEnableFrustumCulling(void) const
{
    return &_sfEnableFrustumCulling;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFEnableFrustumCulling(void)
{
    return this->editSFEnableFrustumCulling();
}
#endif

SFBool *DynamicTerrainBase::editSFUseGpuRenderer(void)
{
    editSField(UseGpuRendererFieldMask);

    return &_sfUseGpuRenderer;
}

const SFBool *DynamicTerrainBase::getSFUseGpuRenderer(void) const
{
    return &_sfUseGpuRenderer;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFUseGpuRenderer (void)
{
    return this->editSFUseGpuRenderer ();
}
#endif

SFBool *DynamicTerrainBase::editSFUseVboExtension(void)
{
    editSField(UseVboExtensionFieldMask);

    return &_sfUseVboExtension;
}

const SFBool *DynamicTerrainBase::getSFUseVboExtension(void) const
{
    return &_sfUseVboExtension;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFUseVboExtension(void)
{
    return this->editSFUseVboExtension();
}
#endif

SFBool *DynamicTerrainBase::editSFEnableSmoothTransition(void)
{
    editSField(EnableSmoothTransitionFieldMask);

    return &_sfEnableSmoothTransition;
}

const SFBool *DynamicTerrainBase::getSFEnableSmoothTransition(void) const
{
    return &_sfEnableSmoothTransition;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFEnableSmoothTransition(void)
{
    return this->editSFEnableSmoothTransition();
}
#endif

SFBool *DynamicTerrainBase::editSFShowBoundingBoxes(void)
{
    editSField(ShowBoundingBoxesFieldMask);

    return &_sfShowBoundingBoxes;
}

const SFBool *DynamicTerrainBase::getSFShowBoundingBoxes(void) const
{
    return &_sfShowBoundingBoxes;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFShowBoundingBoxes(void)
{
    return this->editSFShowBoundingBoxes();
}
#endif

SFBool *DynamicTerrainBase::editSFShowTransitionRegions(void)
{
    editSField(ShowTransitionRegionsFieldMask);

    return &_sfShowTransitionRegions;
}

const SFBool *DynamicTerrainBase::getSFShowTransitionRegions(void) const
{
    return &_sfShowTransitionRegions;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFShowTransitionRegions(void)
{
    return this->editSFShowTransitionRegions();
}
#endif

SFBool *DynamicTerrainBase::editSFDisableUpdate(void)
{
    editSField(DisableUpdateFieldMask);

    return &_sfDisableUpdate;
}

const SFBool *DynamicTerrainBase::getSFDisableUpdate(void) const
{
    return &_sfDisableUpdate;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *DynamicTerrainBase::getSFDisableUpdate  (void)
{
    return this->editSFDisableUpdate  ();
}
#endif

SFString *DynamicTerrainBase::editSFCpuVertexProgram(void)
{
    editSField(CpuVertexProgramFieldMask);

    return &_sfCpuVertexProgram;
}

const SFString *DynamicTerrainBase::getSFCpuVertexProgram(void) const
{
    return &_sfCpuVertexProgram;
}

#ifdef OSG_1_GET_COMPAT
SFString            *DynamicTerrainBase::getSFCpuVertexProgram(void)
{
    return this->editSFCpuVertexProgram();
}
#endif

SFString *DynamicTerrainBase::editSFCpuFragmentProgram(void)
{
    editSField(CpuFragmentProgramFieldMask);

    return &_sfCpuFragmentProgram;
}

const SFString *DynamicTerrainBase::getSFCpuFragmentProgram(void) const
{
    return &_sfCpuFragmentProgram;
}

#ifdef OSG_1_GET_COMPAT
SFString            *DynamicTerrainBase::getSFCpuFragmentProgram(void)
{
    return this->editSFCpuFragmentProgram();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 DynamicTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LevelSizeFieldMask & whichField))
    {
        returnValue += _sfLevelSize.getBinSize();
    }
    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        returnValue += _sfHeightData.getBinSize();
    }
    if(FieldBits::NoField != (HeightDataScaleFieldMask & whichField))
    {
        returnValue += _sfHeightDataScale.getBinSize();
    }
    if(FieldBits::NoField != (HeightDataOffsetFieldMask & whichField))
    {
        returnValue += _sfHeightDataOffset.getBinSize();
    }
    if(FieldBits::NoField != (SampleDistanceFieldMask & whichField))
    {
        returnValue += _sfSampleDistance.getBinSize();
    }
    if(FieldBits::NoField != (TextureDataFieldMask & whichField))
    {
        returnValue += _sfTextureData.getBinSize();
    }
    if(FieldBits::NoField != (HeightColorTextureFieldMask & whichField))
    {
        returnValue += _sfHeightColorTexture.getBinSize();
    }
    if(FieldBits::NoField != (SampleUpdateBudgetFieldMask & whichField))
    {
        returnValue += _sfSampleUpdateBudget.getBinSize();
    }
    if(FieldBits::NoField != (EnableFrustumCullingFieldMask & whichField))
    {
        returnValue += _sfEnableFrustumCulling.getBinSize();
    }
    if(FieldBits::NoField != (UseGpuRendererFieldMask & whichField))
    {
        returnValue += _sfUseGpuRenderer.getBinSize();
    }
    if(FieldBits::NoField != (UseVboExtensionFieldMask & whichField))
    {
        returnValue += _sfUseVboExtension.getBinSize();
    }
    if(FieldBits::NoField != (EnableSmoothTransitionFieldMask & whichField))
    {
        returnValue += _sfEnableSmoothTransition.getBinSize();
    }
    if(FieldBits::NoField != (ShowBoundingBoxesFieldMask & whichField))
    {
        returnValue += _sfShowBoundingBoxes.getBinSize();
    }
    if(FieldBits::NoField != (ShowTransitionRegionsFieldMask & whichField))
    {
        returnValue += _sfShowTransitionRegions.getBinSize();
    }
    if(FieldBits::NoField != (DisableUpdateFieldMask & whichField))
    {
        returnValue += _sfDisableUpdate.getBinSize();
    }
    if(FieldBits::NoField != (CpuVertexProgramFieldMask & whichField))
    {
        returnValue += _sfCpuVertexProgram.getBinSize();
    }
    if(FieldBits::NoField != (CpuFragmentProgramFieldMask & whichField))
    {
        returnValue += _sfCpuFragmentProgram.getBinSize();
    }

    return returnValue;
}

void DynamicTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LevelSizeFieldMask & whichField))
    {
        _sfLevelSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        _sfHeightData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataScaleFieldMask & whichField))
    {
        _sfHeightDataScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataOffsetFieldMask & whichField))
    {
        _sfHeightDataOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SampleDistanceFieldMask & whichField))
    {
        _sfSampleDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextureDataFieldMask & whichField))
    {
        _sfTextureData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightColorTextureFieldMask & whichField))
    {
        _sfHeightColorTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SampleUpdateBudgetFieldMask & whichField))
    {
        _sfSampleUpdateBudget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableFrustumCullingFieldMask & whichField))
    {
        _sfEnableFrustumCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseGpuRendererFieldMask & whichField))
    {
        _sfUseGpuRenderer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseVboExtensionFieldMask & whichField))
    {
        _sfUseVboExtension.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableSmoothTransitionFieldMask & whichField))
    {
        _sfEnableSmoothTransition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowBoundingBoxesFieldMask & whichField))
    {
        _sfShowBoundingBoxes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowTransitionRegionsFieldMask & whichField))
    {
        _sfShowTransitionRegions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisableUpdateFieldMask & whichField))
    {
        _sfDisableUpdate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CpuVertexProgramFieldMask & whichField))
    {
        _sfCpuVertexProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CpuFragmentProgramFieldMask & whichField))
    {
        _sfCpuFragmentProgram.copyToBin(pMem);
    }
}

void DynamicTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LevelSizeFieldMask & whichField))
    {
        _sfLevelSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        _sfHeightData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataScaleFieldMask & whichField))
    {
        _sfHeightDataScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightDataOffsetFieldMask & whichField))
    {
        _sfHeightDataOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SampleDistanceFieldMask & whichField))
    {
        _sfSampleDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextureDataFieldMask & whichField))
    {
        _sfTextureData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightColorTextureFieldMask & whichField))
    {
        _sfHeightColorTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SampleUpdateBudgetFieldMask & whichField))
    {
        _sfSampleUpdateBudget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableFrustumCullingFieldMask & whichField))
    {
        _sfEnableFrustumCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseGpuRendererFieldMask & whichField))
    {
        _sfUseGpuRenderer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseVboExtensionFieldMask & whichField))
    {
        _sfUseVboExtension.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableSmoothTransitionFieldMask & whichField))
    {
        _sfEnableSmoothTransition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowBoundingBoxesFieldMask & whichField))
    {
        _sfShowBoundingBoxes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowTransitionRegionsFieldMask & whichField))
    {
        _sfShowTransitionRegions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisableUpdateFieldMask & whichField))
    {
        _sfDisableUpdate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CpuVertexProgramFieldMask & whichField))
    {
        _sfCpuVertexProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CpuFragmentProgramFieldMask & whichField))
    {
        _sfCpuFragmentProgram.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DynamicTerrainPtr DynamicTerrainBase::create(void)
{
    DynamicTerrainPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<DynamicTerrain::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
DynamicTerrainPtr DynamicTerrainBase::createEmpty(void)
{
    DynamicTerrainPtr returnValue;

    newPtr<DynamicTerrain>(returnValue);

    return returnValue;
}

FieldContainerPtr DynamicTerrainBase::shallowCopy(void) const
{
    DynamicTerrainPtr returnValue;

    newPtr(returnValue, dynamic_cast<const DynamicTerrain *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DynamicTerrainBase::DynamicTerrainBase(void) :
    Inherited(),
    _sfLevelSize              (Int32(63)),
    _sfHeightData             (NullFC),
    _sfHeightDataScale        (Real32(1.0)),
    _sfHeightDataOffset       (Real32(0)),
    _sfSampleDistance         (Real32(1.0)),
    _sfTextureData            (NullFC),
    _sfHeightColorTexture     (NullFC),
    _sfSampleUpdateBudget     (),
    _sfEnableFrustumCulling   (),
    _sfUseGpuRenderer         (bool(false)),
    _sfUseVboExtension        (bool(true)),
    _sfEnableSmoothTransition (),
    _sfShowBoundingBoxes      (),
    _sfShowTransitionRegions  (bool(false)),
    _sfDisableUpdate          (bool(false)),
    _sfCpuVertexProgram       (),
    _sfCpuFragmentProgram     ()
{
}

DynamicTerrainBase::DynamicTerrainBase(const DynamicTerrainBase &source) :
    Inherited(source),
    _sfLevelSize              (source._sfLevelSize              ),
    _sfHeightData             (NullFC),
    _sfHeightDataScale        (source._sfHeightDataScale        ),
    _sfHeightDataOffset       (source._sfHeightDataOffset       ),
    _sfSampleDistance         (source._sfSampleDistance         ),
    _sfTextureData            (NullFC),
    _sfHeightColorTexture     (NullFC),
    _sfSampleUpdateBudget     (source._sfSampleUpdateBudget     ),
    _sfEnableFrustumCulling   (source._sfEnableFrustumCulling   ),
    _sfUseGpuRenderer         (source._sfUseGpuRenderer         ),
    _sfUseVboExtension        (source._sfUseVboExtension        ),
    _sfEnableSmoothTransition (source._sfEnableSmoothTransition ),
    _sfShowBoundingBoxes      (source._sfShowBoundingBoxes      ),
    _sfShowTransitionRegions  (source._sfShowTransitionRegions  ),
    _sfDisableUpdate          (source._sfDisableUpdate          ),
    _sfCpuVertexProgram       (source._sfCpuVertexProgram       ),
    _sfCpuFragmentProgram     (source._sfCpuFragmentProgram     )
{
}


/*-------------------------- destructors ----------------------------------*/

DynamicTerrainBase::~DynamicTerrainBase(void)
{
}

void DynamicTerrainBase::onCreate(const DynamicTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setHeightData(source->getHeightData());

        this->setTextureData(source->getTextureData());

        this->setHeightColorTexture(source->getHeightColorTexture());
    }
}

GetFieldHandlePtr DynamicTerrainBase::getHandleLevelSize       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLevelSize, 
             this->getType().getFieldDesc(LevelSizeFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleLevelSize      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLevelSize, 
             this->getType().getFieldDesc(LevelSizeFieldId)));

    editSField(LevelSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleHeightData      (void) const
{
    SFImagePtr::GetHandlePtr returnValue(
        new  SFImagePtr::GetHandle(
             &_sfHeightData, 
             this->getType().getFieldDesc(HeightDataFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleHeightData     (void)
{
    SFImagePtr::EditHandlePtr returnValue(
        new  SFImagePtr::EditHandle(
             &_sfHeightData, 
             this->getType().getFieldDesc(HeightDataFieldId)));

    returnValue->setSetMethod(boost::bind(&DynamicTerrain::setHeightData, 
                                          static_cast<DynamicTerrain *>(this), _1));

    editSField(HeightDataFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleHeightDataScale (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHeightDataScale, 
             this->getType().getFieldDesc(HeightDataScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleHeightDataScale(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHeightDataScale, 
             this->getType().getFieldDesc(HeightDataScaleFieldId)));

    editSField(HeightDataScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleHeightDataOffset (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHeightDataOffset, 
             this->getType().getFieldDesc(HeightDataOffsetFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleHeightDataOffset(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHeightDataOffset, 
             this->getType().getFieldDesc(HeightDataOffsetFieldId)));

    editSField(HeightDataOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleSampleDistance  (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSampleDistance, 
             this->getType().getFieldDesc(SampleDistanceFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleSampleDistance (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSampleDistance, 
             this->getType().getFieldDesc(SampleDistanceFieldId)));

    editSField(SampleDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleTextureData     (void) const
{
    SFImagePtr::GetHandlePtr returnValue(
        new  SFImagePtr::GetHandle(
             &_sfTextureData, 
             this->getType().getFieldDesc(TextureDataFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleTextureData    (void)
{
    SFImagePtr::EditHandlePtr returnValue(
        new  SFImagePtr::EditHandle(
             &_sfTextureData, 
             this->getType().getFieldDesc(TextureDataFieldId)));

    returnValue->setSetMethod(boost::bind(&DynamicTerrain::setTextureData, 
                                          static_cast<DynamicTerrain *>(this), _1));

    editSField(TextureDataFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleHeightColorTexture (void) const
{
    SFTextureChunkPtr::GetHandlePtr returnValue(
        new  SFTextureChunkPtr::GetHandle(
             &_sfHeightColorTexture, 
             this->getType().getFieldDesc(HeightColorTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleHeightColorTexture(void)
{
    SFTextureChunkPtr::EditHandlePtr returnValue(
        new  SFTextureChunkPtr::EditHandle(
             &_sfHeightColorTexture, 
             this->getType().getFieldDesc(HeightColorTextureFieldId)));

    returnValue->setSetMethod(boost::bind(&DynamicTerrain::setHeightColorTexture, 
                                          static_cast<DynamicTerrain *>(this), _1));

    editSField(HeightColorTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleSampleUpdateBudget (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSampleUpdateBudget, 
             this->getType().getFieldDesc(SampleUpdateBudgetFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleSampleUpdateBudget(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSampleUpdateBudget, 
             this->getType().getFieldDesc(SampleUpdateBudgetFieldId)));

    editSField(SampleUpdateBudgetFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleEnableFrustumCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableFrustumCulling, 
             this->getType().getFieldDesc(EnableFrustumCullingFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleEnableFrustumCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableFrustumCulling, 
             this->getType().getFieldDesc(EnableFrustumCullingFieldId)));

    editSField(EnableFrustumCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleUseGpuRenderer  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseGpuRenderer, 
             this->getType().getFieldDesc(UseGpuRendererFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleUseGpuRenderer (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseGpuRenderer, 
             this->getType().getFieldDesc(UseGpuRendererFieldId)));

    editSField(UseGpuRendererFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleUseVboExtension (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseVboExtension, 
             this->getType().getFieldDesc(UseVboExtensionFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleUseVboExtension(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseVboExtension, 
             this->getType().getFieldDesc(UseVboExtensionFieldId)));

    editSField(UseVboExtensionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleEnableSmoothTransition (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableSmoothTransition, 
             this->getType().getFieldDesc(EnableSmoothTransitionFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleEnableSmoothTransition(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableSmoothTransition, 
             this->getType().getFieldDesc(EnableSmoothTransitionFieldId)));

    editSField(EnableSmoothTransitionFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleShowBoundingBoxes (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowBoundingBoxes, 
             this->getType().getFieldDesc(ShowBoundingBoxesFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleShowBoundingBoxes(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowBoundingBoxes, 
             this->getType().getFieldDesc(ShowBoundingBoxesFieldId)));

    editSField(ShowBoundingBoxesFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleShowTransitionRegions (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowTransitionRegions, 
             this->getType().getFieldDesc(ShowTransitionRegionsFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleShowTransitionRegions(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowTransitionRegions, 
             this->getType().getFieldDesc(ShowTransitionRegionsFieldId)));

    editSField(ShowTransitionRegionsFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleDisableUpdate   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDisableUpdate, 
             this->getType().getFieldDesc(DisableUpdateFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleDisableUpdate  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDisableUpdate, 
             this->getType().getFieldDesc(DisableUpdateFieldId)));

    editSField(DisableUpdateFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleCpuVertexProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfCpuVertexProgram, 
             this->getType().getFieldDesc(CpuVertexProgramFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleCpuVertexProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfCpuVertexProgram, 
             this->getType().getFieldDesc(CpuVertexProgramFieldId)));

    editSField(CpuVertexProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr DynamicTerrainBase::getHandleCpuFragmentProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfCpuFragmentProgram, 
             this->getType().getFieldDesc(CpuFragmentProgramFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicTerrainBase::editHandleCpuFragmentProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfCpuFragmentProgram, 
             this->getType().getFieldDesc(CpuFragmentProgramFieldId)));

    editSField(CpuFragmentProgramFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DynamicTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<DynamicTerrainBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr DynamicTerrainBase::createAspectCopy(void) const
{
    DynamicTerrainPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DynamicTerrain *>(this));

    return returnValue;
}
#endif

void DynamicTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DynamicTerrain *>(this)->setHeightData(NullFC);

    static_cast<DynamicTerrain *>(this)->setTextureData(NullFC);

    static_cast<DynamicTerrain *>(this)->setHeightColorTexture(NullFC);


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DynamicTerrainPtr>::_type("DynamicTerrainPtr", "MaterialDrawablePtr");
#endif


OSG_END_NAMESPACE
