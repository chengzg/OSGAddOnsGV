
static std::string _dither_shadow_vp =
    "uniform mat4 lightPM;\n"
    "uniform float texFactor;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 texPos;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  vec4 realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  projCoord = lightPM * realPos;\n"
    "  projCoord.x *= texFactor;\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  projCoord = bias * projCoord;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _dither_shadow_fp =
    "uniform sampler2DShadow shadowMap;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity;\n"
    "uniform int firstRun;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "uniform float mapSize;\n"
    "uniform float mapFactor;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 texPos;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float pixSize = (1.0/mapSize)*mapFactor;\n"
    "	vec2 o = mod(floor(gl_FragCoord.xy),2.0)*pixSize;\n"
    "	vec4 projectiveBiased = vec4((projCoord.xyz / projCoord.q),1.0);\n"
    "   projectiveBiased = vec4(projectiveBiased.xy * vec2(mapFactor,mapFactor) + o, projectiveBiased.zw);\n"
    "	float shadowed;\n"
    "	shadowed = shadow2D(shadowMap, vec3(projectiveBiased.xy + vec2(-1.5*pixSize,1.5*pixSize),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap, vec3(projectiveBiased.xy + vec2(0.5*pixSize,1.5*pixSize),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap, vec3(projectiveBiased.xy + vec2(-1.5*pixSize,-0.5*pixSize),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap, vec3(projectiveBiased.xy + vec2(0.5*pixSize,-0.5*pixSize),projectiveBiased.z)).x;\n"
    "\n"
    "	shadowed = (1.0-(shadowed * 0.25))*intensity;\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";

static std::string _dither_shadow2_vp =
    "uniform mat4 lightPM1;\n"
    "uniform mat4 lightPM2;\n"
    "uniform float texFactor1;\n"
    "uniform float texFactor2;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 texPos;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  vec4 realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  projCoord = lightPM1 * realPos;\n"
    "  projCoord2 = lightPM2 * realPos;\n"
    "  projCoord.x *= texFactor1;\n"
    "  projCoord2.x *= texFactor2;\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  projCoord = bias * projCoord;\n"
    "  projCoord2 = bias * projCoord2;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _dither_shadow2_fp =
    "uniform sampler2DShadow shadowMap1;\n"
    "uniform sampler2DShadow shadowMap2;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity1;\n"
    "uniform float intensity2;\n"
    "uniform int firstRun;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "uniform float mapSize;\n"
    "uniform float mapFactor1;\n"
    "uniform float mapFactor2;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 texPos;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float pixSize1 = (1.0/mapSize)*mapFactor1;\n"
    "	float pixSize2 = (1.0/mapSize)*mapFactor2;\n"
    "	vec2 frag_xy = gl_FragCoord.xy;\n"
    "	vec2 o1 = mod(floor(frag_xy),2.0)*pixSize1;\n"
    "	vec2 o2 = mod(floor(frag_xy),2.0)*pixSize2;\n"
    "	vec4 projectiveBiased = vec4((projCoord.xyz / projCoord.q),1.0);\n"
    "	vec4 projectiveBiased2 = vec4((projCoord2.xyz / projCoord2.q),1.0);\n"
    "   projectiveBiased = vec4(projectiveBiased.xy * vec2(mapFactor1,mapFactor1) + o1, projectiveBiased.zw);\n"
    "   projectiveBiased2 = vec4(projectiveBiased2.xy * vec2(mapFactor2,mapFactor2) + o2, projectiveBiased2.zw);\n"
    "	float shadowed;\n"
    "	float shadowed2;\n"
    "\n"
    "	shadowed = shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed = (1.0 - (shadowed * 0.25))*intensity1;\n"
    "\n"
    "	shadowed2 = shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 = (1.0 - (shadowed2 * 0.25))*intensity2;\n"
    "\n"
    "	shadowed += shadowed2;\n"
    "\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";

static std::string _dither_shadow3_vp =
    "uniform mat4 lightPM1;\n"
    "uniform mat4 lightPM2;\n"
    "uniform mat4 lightPM3;\n"
    "uniform float texFactor1;\n"
    "uniform float texFactor2;\n"
    "uniform float texFactor3;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 projCoord3;\n"
    "varying vec4 texPos;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  vec4 realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  projCoord = lightPM1 * realPos;\n"
    "  projCoord2 = lightPM2 * realPos;\n"
    "  projCoord3 = lightPM3 * realPos;\n"
    "  projCoord.x *= texFactor1;\n"
    "  projCoord2.x *= texFactor2;\n"
    "  projCoord3.x *= texFactor3;\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  projCoord = bias * projCoord;\n"
    "  projCoord2 = bias * projCoord2;\n"
    "  projCoord3 = bias * projCoord3;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _dither_shadow3_fp =
    "uniform sampler2DShadow shadowMap1;\n"
    "uniform sampler2DShadow shadowMap2;\n"
    "uniform sampler2DShadow shadowMap3;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity1;\n"
    "uniform float intensity2;\n"
    "uniform float intensity3;\n"
    "uniform int firstRun;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "uniform float mapSize;\n"
    "uniform float mapFactor1;\n"
    "uniform float mapFactor2;\n"
    "uniform float mapFactor3;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 projCoord3;\n"
    "varying vec4 texPos;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float pixSize1 = (1.0/mapSize)*mapFactor1;\n"
    "	float pixSize2 = (1.0/mapSize)*mapFactor2;\n"
    "	float pixSize3 = (1.0/mapSize)*mapFactor3;\n"
    "	vec2 frag_xy = gl_FragCoord.xy;\n"
    "	vec2 o1 = mod(floor(frag_xy),2.0)*pixSize1;\n"
    "	vec2 o2 = mod(floor(frag_xy),2.0)*pixSize2;\n"
    "	vec2 o3 = mod(floor(frag_xy),2.0)*pixSize3;\n"
    "	vec4 projectiveBiased = vec4((projCoord.xyz / projCoord.q),1.0);\n"
    "	vec4 projectiveBiased2 = vec4((projCoord2.xyz / projCoord2.q),1.0);\n"
    "	vec4 projectiveBiased3 = vec4((projCoord3.xyz / projCoord3.q),1.0);\n"
    "   projectiveBiased = vec4(projectiveBiased.xy * vec2(mapFactor1,mapFactor1) + o1, projectiveBiased.zw);\n"
    "   projectiveBiased2 = vec4(projectiveBiased2.xy * vec2(mapFactor2,mapFactor2) + o2, projectiveBiased2.zw);\n"
    "   projectiveBiased3 = vec4(projectiveBiased3.xy * vec2(mapFactor3,mapFactor3) + o3, projectiveBiased3.zw);\n"
    "	float shadowed;\n"
    "	float shadowed2;\n"
    "	float shadowed3;\n"
    "\n"
    "	shadowed = shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed = (1.0-(shadowed * 0.25))*intensity1;\n"
    "\n"
    "	shadowed2 = shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 = (1.0-(shadowed2 * 0.25))*intensity2;\n"
    "\n"
    "	shadowed3 = shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(-1.5*pixSize3,1.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(0.5*pixSize3,1.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(-1.5*pixSize3,-0.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(0.5*pixSize3,-0.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 = (1.0-(shadowed3 * 0.25))*intensity3;\n"
    "\n"
    "	shadowed += shadowed2 + shadowed3;\n"
    "\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";

static std::string _dither_shadow4_vp =
    "uniform mat4 lightPM1;\n"
    "uniform mat4 lightPM2;\n"
    "uniform mat4 lightPM3;\n"
    "uniform mat4 lightPM4;\n"
    "uniform float texFactor1;\n"
    "uniform float texFactor2;\n"
    "uniform float texFactor3;\n"
    "uniform float texFactor4;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 projCoord3;\n"
    "varying vec4 projCoord4;\n"
    "varying vec4 texPos;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  vec4 realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  projCoord = lightPM1 * realPos;\n"
    "  projCoord2 = lightPM2 * realPos;\n"
    "  projCoord3 = lightPM3 * realPos;\n"
    "  projCoord4 = lightPM4 * realPos;\n"
    "  projCoord.x *= texFactor1;\n"
    "  projCoord2.x *= texFactor2;\n"
    "  projCoord3.x *= texFactor3;\n"
    "  projCoord4.x *= texFactor4;\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  projCoord = bias * projCoord;\n"
    "  projCoord2 = bias * projCoord2;\n"
    "  projCoord3 = bias * projCoord3;\n"
    "  projCoord4 = bias * projCoord4;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _dither_shadow4_fp =
    "uniform sampler2DShadow shadowMap1;\n"
    "uniform sampler2DShadow shadowMap2;\n"
    "uniform sampler2DShadow shadowMap3;\n"
    "uniform sampler2DShadow shadowMap4;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity1;\n"
    "uniform float intensity2;\n"
    "uniform float intensity3;\n"
    "uniform float intensity4;\n"
    "uniform int firstRun;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "uniform float mapSize;\n"
    "uniform float mapFactor1;\n"
    "uniform float mapFactor2;\n"
    "uniform float mapFactor3;\n"
    "uniform float mapFactor4;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 projCoord3;\n"
    "varying vec4 projCoord4;\n"
    "varying vec4 texPos;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float pixSize1 = (1.0/mapSize)*mapFactor1;\n"
    "	float pixSize2 = (1.0/mapSize)*mapFactor2;\n"
    "	float pixSize3 = (1.0/mapSize)*mapFactor3;\n"
    "	float pixSize4 = (1.0/mapSize)*mapFactor4;\n"
    "	vec2 frag_xy = gl_FragCoord.xy;\n"
    "	vec2 o1 = mod(floor(frag_xy),2.0)*pixSize1;\n"
    "	vec2 o2 = mod(floor(frag_xy),2.0)*pixSize2;\n"
    "	vec2 o3 = mod(floor(frag_xy),2.0)*pixSize3;\n"
    "	vec2 o4 = mod(floor(frag_xy),2.0)*pixSize4;\n"
    "	vec4 projectiveBiased = vec4((projCoord.xyz / projCoord.q),1.0);\n"
    "	vec4 projectiveBiased2 = vec4((projCoord2.xyz / projCoord2.q),1.0);\n"
    "	vec4 projectiveBiased3 = vec4((projCoord3.xyz / projCoord3.q),1.0);\n"
    "	vec4 projectiveBiased4 = vec4((projCoord4.xyz / projCoord4.q),1.0);\n"
    "   projectiveBiased = vec4(projectiveBiased.xy * vec2(mapFactor1,mapFactor1) + o1, projectiveBiased.zw);\n"
    "   projectiveBiased2 = vec4(projectiveBiased2.xy * vec2(mapFactor2,mapFactor2) + o2, projectiveBiased2.zw);\n"
    "   projectiveBiased3 = vec4(projectiveBiased3.xy * vec2(mapFactor3,mapFactor3) + o3, projectiveBiased3.zw);\n"
    "   projectiveBiased4 = vec4(projectiveBiased4.xy * vec2(mapFactor4,mapFactor4) + o4, projectiveBiased4.zw);\n"
    "	float shadowed;\n"
    "	float shadowed2;\n"
    "	float shadowed3;\n"
    "	float shadowed4;\n"
    "\n"
    "	shadowed = shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,1.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(-1.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap1, vec3(projectiveBiased.xy + vec2(0.5*pixSize1,-0.5*pixSize1),projectiveBiased.z)).x;\n"
    "	shadowed = (1.0-(shadowed * 0.25))*intensity1;\n"
    "\n"
    "	shadowed2 = shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,1.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(-1.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 += shadow2D(shadowMap2, vec3(projectiveBiased2.xy + vec2(0.5*pixSize2,-0.5*pixSize2),projectiveBiased2.z)).x;\n"
    "	shadowed2 = (1.0-(shadowed2 * 0.25))*intensity2;\n"
    "\n"
    "	shadowed3 = shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(-1.5*pixSize3,1.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(0.5*pixSize3,1.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(-1.5*pixSize3,-0.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 += shadow2D(shadowMap3, vec3(projectiveBiased3.xy + vec2(0.5*pixSize3,-0.5*pixSize3),projectiveBiased3.z)).x;\n"
    "	shadowed3 = (1.0-(shadowed3 * 0.25))*intensity3;\n"
    "\n"
    "	shadowed4 = shadow2D(shadowMap4, vec3(projectiveBiased4.xy + vec2(-1.5*pixSize4,1.5*pixSize4),projectiveBiased4.z)).x;\n"
    "	shadowed4 += shadow2D(shadowMap4, vec3(projectiveBiased4.xy + vec2(0.5*pixSize4,1.5*pixSize4),projectiveBiased4.z)).x;\n"
    "	shadowed4 += shadow2D(shadowMap4, vec3(projectiveBiased4.xy + vec2(-1.5*pixSize4,-0.5*pixSize4),projectiveBiased4.z)).x;\n"
    "	shadowed4 += shadow2D(shadowMap4, vec3(projectiveBiased4.xy + vec2(0.5*pixSize4,-0.5*pixSize4),projectiveBiased4.z)).x;\n"
    "	shadowed4 = (1.0-(shadowed4 * 0.25))*intensity4;\n"
    "\n"
    "	shadowed += shadowed2 + shadowed3 + shadowed4;\n"
    "\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";

static std::string _dither_cubeshadow_vp =
    "uniform float shadowBias;\n"
    "uniform mat4 lightPMOP;\n"
    "uniform mat4 KKtoWK;\n"
    "uniform float texFactor;\n"
    "varying vec4 texPos;\n"
    "varying vec4 realPos;\n"
    "varying vec4 realPos2;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "void main(void)\n"
    "{\n"
    "  realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  realPos2 = lightPMOP * (KKtoWK * realPos);\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _dither_cubeshadow_fp =
    "uniform sampler2DShadow shadowMap;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity;\n"
    "uniform int firstRun;\n"
    "uniform float mapSize;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "\n"
    "uniform mat4 lightPMA;\n"
    "uniform mat4 lightPMB;\n"
    "uniform mat4 lightPMC;\n"
    "uniform mat4 lightPMD;\n"
    "uniform mat4 lightPME;\n"
    "uniform mat4 lightPMF;\n"
    "\n"
    "uniform float texFactor;\n"
    "uniform float maxTexSize;\n"
    "\n"
    "varying vec4 texPos;\n"
    "varying vec4 realPos;\n"
    "varying vec4 realPos2;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float xOffset = 0.0;\n"
    "	float yOffset = 0.0;\n"
    "	float maxStep = 0.25;\n"
    "\n"
    "	vec4 projCoord2;\n"
    "\n"
    "	if(abs(realPos2.x) > abs(realPos2.y) && abs(realPos2.x) > abs(realPos2.z))\n"
    "	{\n"
    "		if(realPos2.x >= 0.0) {projCoord2 = lightPME * realPos; xOffset = 0.0, yOffset = maxStep;}\n"
    "		else {projCoord2 = lightPMF * realPos; xOffset = maxStep, yOffset = maxStep;}\n"
    "	}\n"
    "	else if(abs(realPos2.y) > abs(realPos2.x) && abs(realPos2.y) > abs(realPos2.z))\n"
    "	{\n"
    "		if(realPos2.y >= 0.0) {projCoord2 = lightPMC * realPos; xOffset = 2.0 * maxStep, yOffset = 0.0;}\n"
    "		else {projCoord2 = lightPMD * realPos; xOffset = 3.0 * maxStep, yOffset = 0.0;}\n"
    "	}\n"
    "	else\n"
    "	{\n"
    "		if(realPos2.z >= 0.0) {projCoord2 = lightPMA * realPos;  xOffset = 0.0, yOffset = 0.0;}\n"
    "		else {projCoord2 = lightPMB * realPos; xOffset = maxStep, yOffset = 0.0;}\n"
    "	}\n"
    "\n"
    "	projCoord2.x *= texFactor;\n"
    "	projCoord2 = bias * projCoord2;\n"
    "\n"
    "	vec4 projectiveBiased = vec4((projCoord2.xyz / projCoord2.q),1.0);\n"
    "\n"
    "	float pixSize = 1.0/(mapSize*4.0);\n"
    "	vec2 o = mod(floor(gl_FragCoord.xy),2.0)*pixSize;\n"
    "	projectiveBiased.x = projectiveBiased.x/4.0 + xOffset + o.x;\n"
    "	projectiveBiased.y = projectiveBiased.y/4.0 + yOffset + o.y;\n"
    "	\n"
    "\n"
    "	float shadowed;\n"
    "	shadowed = shadow2D(shadowMap,vec3(vec2(vec2(projectiveBiased.xy + vec2(-1.5*pixSize,1.5*pixSize))),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap,vec3(vec2(vec2(projectiveBiased.xy + vec2(0.5*pixSize,1.5*pixSize))),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap,vec3(vec2(vec2(projectiveBiased.xy + vec2(-1.5*pixSize,-0.5*pixSize))),projectiveBiased.z)).x;\n"
    "	shadowed += shadow2D(shadowMap,vec3(vec2(vec2(projectiveBiased.xy + vec2(0.5*pixSize,-0.5*pixSize))),projectiveBiased.z)).x;\n"
    "	shadowed = (1.0-(shadowed * 0.25))*intensity;\n"
    "\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";
