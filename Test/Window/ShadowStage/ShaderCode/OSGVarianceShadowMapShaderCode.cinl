
static std::string _depth_vp =
    "varying vec3 lightVec;\n"
    "varying vec4 screenPos;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  lightVec = (gl_ModelViewMatrix * gl_Vertex).xyz;\n"
    "  screenPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _depth_fp =
    "uniform float sceneDiagLength;\n"
    "uniform bool isDirLight;\n"
    "varying vec3 lightVec;\n"
    "varying vec4 screenPos;\n"
    "\n"
    "const float dist_fact = 32.0;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	float x;\n"
    "	if(isDirLight) x = gl_FragCoord.z;\n"
    "	else x = ((length(lightVec)/sceneDiagLength)*2.0)-1.0;\n"
    "	vec2 moments = vec2(x, x*x);\n"
    "	vec2 m1,m2;\n"
    "	m2 = fract(moments * dist_fact);\n"
    "	m1 = moments - (m2 / dist_fact);\n"
    "	gl_FragColor = vec4(m1,m2);\n"
    "}\n";

static std::string _variance_vp =
    "uniform float shadowBias;\n"
    "uniform mat4 lightPM;\n"
    "uniform mat4 lightPM2;\n"
    "uniform float texFactor;\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 texPos;\n"
    "varying vec4 realPos;\n"
    "\n"
#ifndef NO_CONST_GLSL_VAR
    "const "
#endif
    "mat4 bias = mat4(0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.0,0.0,0.0,0.5,0.0,0.5,0.5,0.5,1.0);\n""\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "  realPos = gl_ModelViewMatrix * gl_Vertex;\n"
    "  projCoord = lightPM * realPos;\n"
    "  projCoord.x *= texFactor;\n"
    "  projCoord2 = lightPM2 * realPos;\n"
    "  texPos = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
    "  projCoord = bias * projCoord;\n"
    "  texPos = bias * texPos;\n"
    "  gl_Position = ftransform();\n"
    "}\n";

static std::string _variance_fp =
    "uniform sampler2D shadowMap;\n"
    "uniform sampler2D oldFactorMap;\n"
    "uniform float intensity;\n"
    "uniform int firstRun;\n"
    "uniform float xFactor;\n"
    "uniform float yFactor;\n"
    "uniform float sceneDiagLength;\n"
    "uniform float Lod;\n"
    "uniform bool isDirLight;\n"
    "\n"
    "varying vec4 projCoord;\n"
    "varying vec4 projCoord2;\n"
    "varying vec4 texPos;\n"
    "varying vec4 realPos;\n"
    "\n"
    "const float epsilon = 0.00025;\n"
    "const float dist_factor = 32.0;\n"
    "\n"
    "void main(void)\n"
    "{\n"
    "	vec4 projectiveBiased = vec4((projCoord.xyz / projCoord.q),1.0);\n"
    "	float shadowed = 0.0;\n"
    "\n"
    "	vec2 moments = texture2DLod(shadowMap,projectiveBiased.xy,Lod).xy;\n"
    "	moments += texture2DLod(shadowMap,projectiveBiased.xy,Lod).zw / dist_factor;\n"
    "	\n"
    "	float distL;\n"
    "	if(isDirLight) distL = projectiveBiased.z;\n"
    "	else distL = ((length(projCoord2.xyz)/sceneDiagLength)*2.0)-1.0;\n"
    "\n"
    "	if(distL  < moments.x) shadowed = 0.0;\n"
    "	else\n"
    "	{\n"
    "		float E_x2 = moments.y;\n"
    "		float Ex_2 = moments.x * moments.x;\n"
    "		float variance = min(max(E_x2 - Ex_2,epsilon), 1.0);\n"
    "		float m_d = moments.x - distL;\n"
    "		float p_max = variance / (variance + m_d * m_d);\n"
    "		shadowed = 1.0 - p_max;\n"
    "	}\n"
    "	shadowed *= intensity;\n"
    "	if(firstRun == 0) shadowed += texture2DProj(oldFactorMap,vec3(texPos.xy * vec2(xFactor,yFactor),texPos.w)).x;\n"
    "	gl_FragColor = vec4(shadowed,0.0,0.0,1.0);\n"
    "}\n";
