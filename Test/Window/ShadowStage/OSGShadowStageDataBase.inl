/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ShadowStageDataBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ShadowStageDataBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ShadowStageDataBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ShadowStageData::_sfToneMappingMaterial field.
inline
ChunkMaterial * ShadowStageDataBase::getToneMappingMaterial(void) const
{
    return _sfToneMappingMaterial.getValue();
}

//! Set the value of the ShadowStageData::_sfToneMappingMaterial field.
inline
void ShadowStageDataBase::setToneMappingMaterial(ChunkMaterial * const value)
{
    editSField(ToneMappingMaterialFieldMask);

    _sfToneMappingMaterial.setValue(value);
}

//! Get the value of the ShadowStageData::_sfBlurRenderTarget field.
inline
FrameBufferObject * ShadowStageDataBase::getBlurRenderTarget(void) const
{
    return _sfBlurRenderTarget.getValue();
}

//! Set the value of the ShadowStageData::_sfBlurRenderTarget field.
inline
void ShadowStageDataBase::setBlurRenderTarget(FrameBufferObject * const value)
{
    editSField(BlurRenderTargetFieldMask);

    _sfBlurRenderTarget.setValue(value);
}

//! Get the value of the ShadowStageData::_sfBlurMaterial field.
inline
ChunkMaterial * ShadowStageDataBase::getBlurMaterial(void) const
{
    return _sfBlurMaterial.getValue();
}

//! Set the value of the ShadowStageData::_sfBlurMaterial field.
inline
void ShadowStageDataBase::setBlurMaterial(ChunkMaterial * const value)
{
    editSField(BlurMaterialFieldMask);

    _sfBlurMaterial.setValue(value);
}

//! Get the value of the ShadowStageData::_sfHBlurShader field.
inline
SHLChunk * ShadowStageDataBase::getHBlurShader(void) const
{
    return _sfHBlurShader.getValue();
}

//! Set the value of the ShadowStageData::_sfHBlurShader field.
inline
void ShadowStageDataBase::setHBlurShader(SHLChunk * const value)
{
    editSField(HBlurShaderFieldMask);

    _sfHBlurShader.setValue(value);
}

//! Get the value of the ShadowStageData::_sfVBlurShader field.
inline
SHLChunk * ShadowStageDataBase::getVBlurShader(void) const
{
    return _sfVBlurShader.getValue();
}

//! Set the value of the ShadowStageData::_sfVBlurShader field.
inline
void ShadowStageDataBase::setVBlurShader(SHLChunk * const value)
{
    editSField(VBlurShaderFieldMask);

    _sfVBlurShader.setValue(value);
}
//! Get the value of the ShadowStageData::_sfWidth field.

inline
UInt32 &ShadowStageDataBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the ShadowStageData::_sfWidth field.
inline
      UInt32  ShadowStageDataBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the ShadowStageData::_sfWidth field.
inline
void ShadowStageDataBase::setWidth(const UInt32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the ShadowStageData::_sfHeight field.

inline
UInt32 &ShadowStageDataBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the ShadowStageData::_sfHeight field.
inline
      UInt32  ShadowStageDataBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the ShadowStageData::_sfHeight field.
inline
void ShadowStageDataBase::setHeight(const UInt32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}

//! Get the value of the ShadowStageData::_sfShrinkRenderTarget field.
inline
FrameBufferObject * ShadowStageDataBase::getShrinkRenderTarget(void) const
{
    return _sfShrinkRenderTarget.getValue();
}

//! Set the value of the ShadowStageData::_sfShrinkRenderTarget field.
inline
void ShadowStageDataBase::setShrinkRenderTarget(FrameBufferObject * const value)
{
    editSField(ShrinkRenderTargetFieldMask);

    _sfShrinkRenderTarget.setValue(value);
}

//! Get the value of the ShadowStageData::_sfShrinkMaterial field.
inline
ChunkMaterial * ShadowStageDataBase::getShrinkMaterial(void) const
{
    return _sfShrinkMaterial.getValue();
}

//! Set the value of the ShadowStageData::_sfShrinkMaterial field.
inline
void ShadowStageDataBase::setShrinkMaterial(ChunkMaterial * const value)
{
    editSField(ShrinkMaterialFieldMask);

    _sfShrinkMaterial.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ShadowStageDataBase::execSync (      ShadowStageDataBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ToneMappingMaterialFieldMask & whichField))
        _sfToneMappingMaterial.syncWith(pFrom->_sfToneMappingMaterial);

    if(FieldBits::NoField != (BlurRenderTargetFieldMask & whichField))
        _sfBlurRenderTarget.syncWith(pFrom->_sfBlurRenderTarget);

    if(FieldBits::NoField != (BlurMaterialFieldMask & whichField))
        _sfBlurMaterial.syncWith(pFrom->_sfBlurMaterial);

    if(FieldBits::NoField != (HBlurShaderFieldMask & whichField))
        _sfHBlurShader.syncWith(pFrom->_sfHBlurShader);

    if(FieldBits::NoField != (VBlurShaderFieldMask & whichField))
        _sfVBlurShader.syncWith(pFrom->_sfVBlurShader);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (ShrinkRenderTargetFieldMask & whichField))
        _sfShrinkRenderTarget.syncWith(pFrom->_sfShrinkRenderTarget);

    if(FieldBits::NoField != (ShrinkMaterialFieldMask & whichField))
        _sfShrinkMaterial.syncWith(pFrom->_sfShrinkMaterial);
}
#endif


inline
const Char8 *ShadowStageDataBase::getClassname(void)
{
    return "ShadowStageData";
}
OSG_GEN_CONTAINERPTR(ShadowStageData);

OSG_END_NAMESPACE

