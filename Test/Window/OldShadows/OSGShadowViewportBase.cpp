/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowViewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGAddOnsConfig.h>


#include <OSGGL.h>                        // Red default header
#include <OSGGL.h>                        // Blue default header
#include <OSGGL.h>                        // Green default header
#include <OSGGL.h>                        // Alpha default header

#include <OSGNode.h> // SceneRoot Class
#include <OSGNode.h> // LightNodes Class
#include <OSGNode.h> // ExcludeNodes Class

#include "OSGShadowViewportBase.h"
#include "OSGShadowViewport.h"

#include "boost/bind.hpp"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShadowViewport
    First Release of ShadowMap-Viewport. Viewport is capable to handle multiple Lights and produces ambient Shadows. Viewport uses On-Screen-rendering, so Window must not be occulled.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Real32          ShadowViewportBase::_sfOffBias
    Offset-Bias for Polygon-Offset. Needs to be used with Polygon-Chunk
*/

/*! \var Real32          ShadowViewportBase::_sfOffFactor
    Offset-Factor for Polygon-Offset. Needs to be used with Polygon-Chunk
*/

/*! \var Node *          ShadowViewportBase::_sfSceneRoot
    Scene root node.
*/

/*! \var UInt32          ShadowViewportBase::_sfMapSize
    
*/

/*! \var Node *          ShadowViewportBase::_mfLightNodes
    
*/

/*! \var Node *          ShadowViewportBase::_mfExcludeNodes
    
*/

/*! \var bool            ShadowViewportBase::_sfMapAutoUpdate
    
*/

/*! \var UInt32          ShadowViewportBase::_sfShadowMode
    
*/

/*! \var Real32          ShadowViewportBase::_sfShadowSmoothness
    
*/

/*! \var bool            ShadowViewportBase::_sfShadowOn
    
*/

/*! \var bool            ShadowViewportBase::_sfAutoSearchForLights
    if enabled, all lights in the scenegraph are added to the ShadowViewport
*/

/*! \var Real32          ShadowViewportBase::_sfGlobalShadowIntensity
    Used for every Light if set != 1.0
*/

/*! \var bool            ShadowViewportBase::_sfFboOn
    Sometimes rendering directly into framebuffer is needed instead of using textures.
*/

/*! \var bool            ShadowViewportBase::_sfAutoExcludeTransparentNodes
    Usually transparent objects do not throw shadows.
*/

/*! \var bool            ShadowViewportBase::_sfDisableOccludedLights
    Check lights occlusion to disable occluded lights.
*/

/*! \var bool            ShadowViewportBase::_sfRed
    Define whether the red color channel is written to.
*/

/*! \var bool            ShadowViewportBase::_sfBlue
    Define whether the green color channel is written to.
*/

/*! \var bool            ShadowViewportBase::_sfGreen
    Define whether the blue color channel is written to.
*/

/*! \var bool            ShadowViewportBase::_sfAlpha
    Define whether the alpha color channel is written to.
*/


void ShadowViewportBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "offBias",
        "Offset-Bias for Polygon-Offset. Needs to be used with Polygon-Chunk\n",
        OffBiasFieldId, OffBiasFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleOffBias),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleOffBias));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "offFactor",
        "Offset-Factor for Polygon-Offset. Needs to be used with Polygon-Chunk\n",
        OffFactorFieldId, OffFactorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleOffFactor),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleOffFactor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "sceneRoot",
        "Scene root node.\n",
        SceneRootFieldId, SceneRootFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleSceneRoot),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleSceneRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "mapSize",
        "",
        MapSizeFieldId, MapSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleMapSize),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleMapSize));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "lightNodes",
        "",
        LightNodesFieldId, LightNodesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleLightNodes),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleLightNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "excludeNodes",
        "",
        ExcludeNodesFieldId, ExcludeNodesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleExcludeNodes),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleExcludeNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "mapAutoUpdate",
        "",
        MapAutoUpdateFieldId, MapAutoUpdateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleMapAutoUpdate),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleMapAutoUpdate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "shadowMode",
        "",
        ShadowModeFieldId, ShadowModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleShadowMode),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleShadowMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shadowSmoothness",
        "",
        ShadowSmoothnessFieldId, ShadowSmoothnessFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleShadowSmoothness),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleShadowSmoothness));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "shadowOn",
        "",
        ShadowOnFieldId, ShadowOnFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleShadowOn),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleShadowOn));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "autoSearchForLights",
        "if enabled, all lights in the scenegraph are added to the ShadowViewport\n",
        AutoSearchForLightsFieldId, AutoSearchForLightsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleAutoSearchForLights),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleAutoSearchForLights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "globalShadowIntensity",
        "Used for every Light if set != 1.0\n",
        GlobalShadowIntensityFieldId, GlobalShadowIntensityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleGlobalShadowIntensity),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleGlobalShadowIntensity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "fboOn",
        "Sometimes rendering directly into framebuffer is needed instead of using textures.\n",
        FboOnFieldId, FboOnFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleFboOn),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleFboOn));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "autoExcludeTransparentNodes",
        "Usually transparent objects do not throw shadows.\n",
        AutoExcludeTransparentNodesFieldId, AutoExcludeTransparentNodesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleAutoExcludeTransparentNodes),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleAutoExcludeTransparentNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "disableOccludedLights",
        "Check lights occlusion to disable occluded lights.\n",
        DisableOccludedLightsFieldId, DisableOccludedLightsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleDisableOccludedLights),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleDisableOccludedLights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "red",
        "Define whether the red color channel is written to.\n",
        RedFieldId, RedFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleRed),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleRed));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "blue",
        "Define whether the green color channel is written to.\n",
        BlueFieldId, BlueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleBlue),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleBlue));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "green",
        "Define whether the blue color channel is written to.\n",
        GreenFieldId, GreenFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleGreen),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleGreen));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "alpha",
        "Define whether the alpha color channel is written to.\n",
        AlphaFieldId, AlphaFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowViewport::editHandleAlpha),
        static_cast<FieldGetMethodSig >(&ShadowViewport::getHandleAlpha));

    oType.addInitialDesc(pDesc);
}


ShadowViewportBase::TypeObject ShadowViewportBase::_type(
    ShadowViewportBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ShadowViewportBase::createEmptyLocal),
    ShadowViewport::initMethod,
    ShadowViewport::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ShadowViewportBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ShadowViewport\"\n"
    "\tparent=\"StereoBufferViewport\"\n"
    "\tlibrary=\"Window\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "First Release of ShadowMap-Viewport. Viewport is capable to handle multiple Lights and produces ambient Shadows. Viewport uses On-Screen-rendering, so Window must not be occulled.\n"
    "\t<Field\n"
    "\t\tname=\"offBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"6\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOffset-Bias for Polygon-Offset. Needs to be used with Polygon-Chunk\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"offFactor\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"4\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOffset-Factor for Polygon-Offset. Needs to be used with Polygon-Chunk\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sceneRoot\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tScene root node.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"mapSize\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"512\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lightNodes\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"excludeNodes\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"mapAutoUpdate\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shadowMode\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shadowSmoothness\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.5\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shadowOn\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoSearchForLights\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tif enabled, all lights in the scenegraph are added to the ShadowViewport\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"globalShadowIntensity\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tUsed for every Light if set != 1.0\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fboOn\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSometimes rendering directly into framebuffer is needed instead of using textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autoExcludeTransparentNodes\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tUsually transparent objects do not throw shadows.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"disableOccludedLights\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tCheck lights occlusion to disable occluded lights.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"red\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TRUE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDefine whether the red color channel is written to.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"blue\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TRUE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDefine whether the green color channel is written to.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"green\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TRUE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDefine whether the blue color channel is written to.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"alpha\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TRUE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDefine whether the alpha color channel is written to.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "First Release of ShadowMap-Viewport. Viewport is capable to handle multiple Lights and produces ambient Shadows. Viewport uses On-Screen-rendering, so Window must not be occulled.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShadowViewportBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShadowViewportBase::getType(void) const
{
    return _type;
}

UInt32 ShadowViewportBase::getContainerSize(void) const
{
    return sizeof(ShadowViewport);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *ShadowViewportBase::editSFOffBias(void)
{
    editSField(OffBiasFieldMask);

    return &_sfOffBias;
}

const SFReal32 *ShadowViewportBase::getSFOffBias(void) const
{
    return &_sfOffBias;
}


SFReal32 *ShadowViewportBase::editSFOffFactor(void)
{
    editSField(OffFactorFieldMask);

    return &_sfOffFactor;
}

const SFReal32 *ShadowViewportBase::getSFOffFactor(void) const
{
    return &_sfOffFactor;
}


//! Get the ShadowViewport::_sfSceneRoot field.
const SFUnrecNodePtr *ShadowViewportBase::getSFSceneRoot(void) const
{
    return &_sfSceneRoot;
}

SFUnrecNodePtr      *ShadowViewportBase::editSFSceneRoot      (void)
{
    editSField(SceneRootFieldMask);

    return &_sfSceneRoot;
}

SFUInt32 *ShadowViewportBase::editSFMapSize(void)
{
    editSField(MapSizeFieldMask);

    return &_sfMapSize;
}

const SFUInt32 *ShadowViewportBase::getSFMapSize(void) const
{
    return &_sfMapSize;
}


//! Get the ShadowViewport::_mfLightNodes field.
const MFUnrecNodePtr *ShadowViewportBase::getMFLightNodes(void) const
{
    return &_mfLightNodes;
}

MFUnrecNodePtr      *ShadowViewportBase::editMFLightNodes     (void)
{
    editMField(LightNodesFieldMask, _mfLightNodes);

    return &_mfLightNodes;
}

//! Get the ShadowViewport::_mfExcludeNodes field.
const MFUnrecNodePtr *ShadowViewportBase::getMFExcludeNodes(void) const
{
    return &_mfExcludeNodes;
}

MFUnrecNodePtr      *ShadowViewportBase::editMFExcludeNodes   (void)
{
    editMField(ExcludeNodesFieldMask, _mfExcludeNodes);

    return &_mfExcludeNodes;
}

SFBool *ShadowViewportBase::editSFMapAutoUpdate(void)
{
    editSField(MapAutoUpdateFieldMask);

    return &_sfMapAutoUpdate;
}

const SFBool *ShadowViewportBase::getSFMapAutoUpdate(void) const
{
    return &_sfMapAutoUpdate;
}


SFUInt32 *ShadowViewportBase::editSFShadowMode(void)
{
    editSField(ShadowModeFieldMask);

    return &_sfShadowMode;
}

const SFUInt32 *ShadowViewportBase::getSFShadowMode(void) const
{
    return &_sfShadowMode;
}


SFReal32 *ShadowViewportBase::editSFShadowSmoothness(void)
{
    editSField(ShadowSmoothnessFieldMask);

    return &_sfShadowSmoothness;
}

const SFReal32 *ShadowViewportBase::getSFShadowSmoothness(void) const
{
    return &_sfShadowSmoothness;
}


SFBool *ShadowViewportBase::editSFShadowOn(void)
{
    editSField(ShadowOnFieldMask);

    return &_sfShadowOn;
}

const SFBool *ShadowViewportBase::getSFShadowOn(void) const
{
    return &_sfShadowOn;
}


SFBool *ShadowViewportBase::editSFAutoSearchForLights(void)
{
    editSField(AutoSearchForLightsFieldMask);

    return &_sfAutoSearchForLights;
}

const SFBool *ShadowViewportBase::getSFAutoSearchForLights(void) const
{
    return &_sfAutoSearchForLights;
}


SFReal32 *ShadowViewportBase::editSFGlobalShadowIntensity(void)
{
    editSField(GlobalShadowIntensityFieldMask);

    return &_sfGlobalShadowIntensity;
}

const SFReal32 *ShadowViewportBase::getSFGlobalShadowIntensity(void) const
{
    return &_sfGlobalShadowIntensity;
}


SFBool *ShadowViewportBase::editSFFboOn(void)
{
    editSField(FboOnFieldMask);

    return &_sfFboOn;
}

const SFBool *ShadowViewportBase::getSFFboOn(void) const
{
    return &_sfFboOn;
}


SFBool *ShadowViewportBase::editSFAutoExcludeTransparentNodes(void)
{
    editSField(AutoExcludeTransparentNodesFieldMask);

    return &_sfAutoExcludeTransparentNodes;
}

const SFBool *ShadowViewportBase::getSFAutoExcludeTransparentNodes(void) const
{
    return &_sfAutoExcludeTransparentNodes;
}


SFBool *ShadowViewportBase::editSFDisableOccludedLights(void)
{
    editSField(DisableOccludedLightsFieldMask);

    return &_sfDisableOccludedLights;
}

const SFBool *ShadowViewportBase::getSFDisableOccludedLights(void) const
{
    return &_sfDisableOccludedLights;
}


SFBool *ShadowViewportBase::editSFRed(void)
{
    editSField(RedFieldMask);

    return &_sfRed;
}

const SFBool *ShadowViewportBase::getSFRed(void) const
{
    return &_sfRed;
}


SFBool *ShadowViewportBase::editSFBlue(void)
{
    editSField(BlueFieldMask);

    return &_sfBlue;
}

const SFBool *ShadowViewportBase::getSFBlue(void) const
{
    return &_sfBlue;
}


SFBool *ShadowViewportBase::editSFGreen(void)
{
    editSField(GreenFieldMask);

    return &_sfGreen;
}

const SFBool *ShadowViewportBase::getSFGreen(void) const
{
    return &_sfGreen;
}


SFBool *ShadowViewportBase::editSFAlpha(void)
{
    editSField(AlphaFieldMask);

    return &_sfAlpha;
}

const SFBool *ShadowViewportBase::getSFAlpha(void) const
{
    return &_sfAlpha;
}




void ShadowViewportBase::pushToLightNodes(Node * const value)
{
    editMField(LightNodesFieldMask, _mfLightNodes);

    _mfLightNodes.push_back(value);
}

void ShadowViewportBase::assignLightNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<ShadowViewport *>(this)->clearLightNodes();

    while(elemIt != elemEnd)
    {
        this->pushToLightNodes(*elemIt);

        ++elemIt;
    }
}

void ShadowViewportBase::removeFromLightNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfLightNodes.size())
    {
        editMField(LightNodesFieldMask, _mfLightNodes);

        _mfLightNodes.erase(uiIndex);
    }
}

void ShadowViewportBase::removeObjFromLightNodes(Node * const value)
{
    Int32 iElemIdx = _mfLightNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(LightNodesFieldMask, _mfLightNodes);

        _mfLightNodes.erase(iElemIdx);
    }
}
void ShadowViewportBase::clearLightNodes(void)
{
    editMField(LightNodesFieldMask, _mfLightNodes);


    _mfLightNodes.clear();
}

void ShadowViewportBase::pushToExcludeNodes(Node * const value)
{
    editMField(ExcludeNodesFieldMask, _mfExcludeNodes);

    _mfExcludeNodes.push_back(value);
}

void ShadowViewportBase::assignExcludeNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<ShadowViewport *>(this)->clearExcludeNodes();

    while(elemIt != elemEnd)
    {
        this->pushToExcludeNodes(*elemIt);

        ++elemIt;
    }
}

void ShadowViewportBase::removeFromExcludeNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfExcludeNodes.size())
    {
        editMField(ExcludeNodesFieldMask, _mfExcludeNodes);

        _mfExcludeNodes.erase(uiIndex);
    }
}

void ShadowViewportBase::removeObjFromExcludeNodes(Node * const value)
{
    Int32 iElemIdx = _mfExcludeNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ExcludeNodesFieldMask, _mfExcludeNodes);

        _mfExcludeNodes.erase(iElemIdx);
    }
}
void ShadowViewportBase::clearExcludeNodes(void)
{
    editMField(ExcludeNodesFieldMask, _mfExcludeNodes);


    _mfExcludeNodes.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ShadowViewportBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        returnValue += _sfOffBias.getBinSize();
    }
    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        returnValue += _sfOffFactor.getBinSize();
    }
    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        returnValue += _sfSceneRoot.getBinSize();
    }
    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        returnValue += _sfMapSize.getBinSize();
    }
    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        returnValue += _mfLightNodes.getBinSize();
    }
    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        returnValue += _mfExcludeNodes.getBinSize();
    }
    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        returnValue += _sfMapAutoUpdate.getBinSize();
    }
    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        returnValue += _sfShadowMode.getBinSize();
    }
    if(FieldBits::NoField != (ShadowSmoothnessFieldMask & whichField))
    {
        returnValue += _sfShadowSmoothness.getBinSize();
    }
    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        returnValue += _sfShadowOn.getBinSize();
    }
    if(FieldBits::NoField != (AutoSearchForLightsFieldMask & whichField))
    {
        returnValue += _sfAutoSearchForLights.getBinSize();
    }
    if(FieldBits::NoField != (GlobalShadowIntensityFieldMask & whichField))
    {
        returnValue += _sfGlobalShadowIntensity.getBinSize();
    }
    if(FieldBits::NoField != (FboOnFieldMask & whichField))
    {
        returnValue += _sfFboOn.getBinSize();
    }
    if(FieldBits::NoField != (AutoExcludeTransparentNodesFieldMask & whichField))
    {
        returnValue += _sfAutoExcludeTransparentNodes.getBinSize();
    }
    if(FieldBits::NoField != (DisableOccludedLightsFieldMask & whichField))
    {
        returnValue += _sfDisableOccludedLights.getBinSize();
    }
    if(FieldBits::NoField != (RedFieldMask & whichField))
    {
        returnValue += _sfRed.getBinSize();
    }
    if(FieldBits::NoField != (BlueFieldMask & whichField))
    {
        returnValue += _sfBlue.getBinSize();
    }
    if(FieldBits::NoField != (GreenFieldMask & whichField))
    {
        returnValue += _sfGreen.getBinSize();
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        returnValue += _sfAlpha.getBinSize();
    }

    return returnValue;
}

void ShadowViewportBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        _sfOffBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        _sfOffFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        _sfSceneRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        _sfMapSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        _mfLightNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        _mfExcludeNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        _sfMapAutoUpdate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        _sfShadowMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowSmoothnessFieldMask & whichField))
    {
        _sfShadowSmoothness.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        _sfShadowOn.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoSearchForLightsFieldMask & whichField))
    {
        _sfAutoSearchForLights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlobalShadowIntensityFieldMask & whichField))
    {
        _sfGlobalShadowIntensity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FboOnFieldMask & whichField))
    {
        _sfFboOn.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoExcludeTransparentNodesFieldMask & whichField))
    {
        _sfAutoExcludeTransparentNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisableOccludedLightsFieldMask & whichField))
    {
        _sfDisableOccludedLights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RedFieldMask & whichField))
    {
        _sfRed.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlueFieldMask & whichField))
    {
        _sfBlue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GreenFieldMask & whichField))
    {
        _sfGreen.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        _sfAlpha.copyToBin(pMem);
    }
}

void ShadowViewportBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
    {
        _sfOffBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
    {
        _sfOffFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneRootFieldMask & whichField))
    {
        _sfSceneRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
    {
        _sfMapSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
    {
        _mfLightNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
    {
        _mfExcludeNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
    {
        _sfMapAutoUpdate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
    {
        _sfShadowMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowSmoothnessFieldMask & whichField))
    {
        _sfShadowSmoothness.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
    {
        _sfShadowOn.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoSearchForLightsFieldMask & whichField))
    {
        _sfAutoSearchForLights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlobalShadowIntensityFieldMask & whichField))
    {
        _sfGlobalShadowIntensity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FboOnFieldMask & whichField))
    {
        _sfFboOn.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoExcludeTransparentNodesFieldMask & whichField))
    {
        _sfAutoExcludeTransparentNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisableOccludedLightsFieldMask & whichField))
    {
        _sfDisableOccludedLights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RedFieldMask & whichField))
    {
        _sfRed.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlueFieldMask & whichField))
    {
        _sfBlue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GreenFieldMask & whichField))
    {
        _sfGreen.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        _sfAlpha.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShadowViewportTransitPtr ShadowViewportBase::createLocal(BitVector bFlags)
{
    ShadowViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShadowViewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShadowViewportTransitPtr ShadowViewportBase::createDependent(BitVector bFlags)
{
    ShadowViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShadowViewport>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShadowViewportTransitPtr ShadowViewportBase::create(void)
{
    ShadowViewportTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShadowViewport>(tmpPtr);
    }

    return fc;
}

ShadowViewport *ShadowViewportBase::createEmptyLocal(BitVector bFlags)
{
    ShadowViewport *returnValue;

    newPtr<ShadowViewport>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShadowViewport *ShadowViewportBase::createEmpty(void)
{
    ShadowViewport *returnValue;

    newPtr<ShadowViewport>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShadowViewportBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShadowViewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShadowViewport *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShadowViewportBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShadowViewport *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShadowViewport *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShadowViewportBase::shallowCopy(void) const
{
    ShadowViewport *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShadowViewport *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShadowViewportBase::ShadowViewportBase(void) :
    Inherited(),
    _sfOffBias                (Real32(6)),
    _sfOffFactor              (Real32(4)),
    _sfSceneRoot              (NULL),
    _sfMapSize                (UInt32(512)),
    _mfLightNodes             (),
    _mfExcludeNodes           (),
    _sfMapAutoUpdate          (bool(true)),
    _sfShadowMode             (UInt32(0)),
    _sfShadowSmoothness       (Real32(0.5)),
    _sfShadowOn               (bool(true)),
    _sfAutoSearchForLights    (bool(false)),
    _sfGlobalShadowIntensity  (Real32(0.0)),
    _sfFboOn                  (bool(true)),
    _sfAutoExcludeTransparentNodes(bool(true)),
    _sfDisableOccludedLights  (bool(false)),
    _sfRed                    (bool(GL_TRUE)),
    _sfBlue                   (bool(GL_TRUE)),
    _sfGreen                  (bool(GL_TRUE)),
    _sfAlpha                  (bool(GL_TRUE))
{
}

ShadowViewportBase::ShadowViewportBase(const ShadowViewportBase &source) :
    Inherited(source),
    _sfOffBias                (source._sfOffBias                ),
    _sfOffFactor              (source._sfOffFactor              ),
    _sfSceneRoot              (NULL),
    _sfMapSize                (source._sfMapSize                ),
    _mfLightNodes             (),
    _mfExcludeNodes           (),
    _sfMapAutoUpdate          (source._sfMapAutoUpdate          ),
    _sfShadowMode             (source._sfShadowMode             ),
    _sfShadowSmoothness       (source._sfShadowSmoothness       ),
    _sfShadowOn               (source._sfShadowOn               ),
    _sfAutoSearchForLights    (source._sfAutoSearchForLights    ),
    _sfGlobalShadowIntensity  (source._sfGlobalShadowIntensity  ),
    _sfFboOn                  (source._sfFboOn                  ),
    _sfAutoExcludeTransparentNodes(source._sfAutoExcludeTransparentNodes),
    _sfDisableOccludedLights  (source._sfDisableOccludedLights  ),
    _sfRed                    (source._sfRed                    ),
    _sfBlue                   (source._sfBlue                   ),
    _sfGreen                  (source._sfGreen                  ),
    _sfAlpha                  (source._sfAlpha                  )
{
}


/*-------------------------- destructors ----------------------------------*/

ShadowViewportBase::~ShadowViewportBase(void)
{
}

void ShadowViewportBase::onCreate(const ShadowViewport *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShadowViewport *pThis = static_cast<ShadowViewport *>(this);

        pThis->setSceneRoot(source->getSceneRoot());

        MFUnrecNodePtr::const_iterator LightNodesIt  =
            source->_mfLightNodes.begin();
        MFUnrecNodePtr::const_iterator LightNodesEnd =
            source->_mfLightNodes.end  ();

        while(LightNodesIt != LightNodesEnd)
        {
            pThis->pushToLightNodes(*LightNodesIt);

            ++LightNodesIt;
        }

        MFUnrecNodePtr::const_iterator ExcludeNodesIt  =
            source->_mfExcludeNodes.begin();
        MFUnrecNodePtr::const_iterator ExcludeNodesEnd =
            source->_mfExcludeNodes.end  ();

        while(ExcludeNodesIt != ExcludeNodesEnd)
        {
            pThis->pushToExcludeNodes(*ExcludeNodesIt);

            ++ExcludeNodesIt;
        }
    }
}

GetFieldHandlePtr ShadowViewportBase::getHandleOffBias         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOffBias,
             this->getType().getFieldDesc(OffBiasFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleOffBias        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOffBias,
             this->getType().getFieldDesc(OffBiasFieldId)));


    editSField(OffBiasFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleOffFactor       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOffFactor,
             this->getType().getFieldDesc(OffFactorFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleOffFactor      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOffFactor,
             this->getType().getFieldDesc(OffFactorFieldId)));


    editSField(OffFactorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleSceneRoot       (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfSceneRoot,
             this->getType().getFieldDesc(SceneRootFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleSceneRoot      (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfSceneRoot,
             this->getType().getFieldDesc(SceneRootFieldId)));

    returnValue->setSetMethod(
        boost::bind(&ShadowViewport::setSceneRoot,
                    static_cast<ShadowViewport *>(this), _1));

    editSField(SceneRootFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleMapSize         (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMapSize,
             this->getType().getFieldDesc(MapSizeFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleMapSize        (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMapSize,
             this->getType().getFieldDesc(MapSizeFieldId)));


    editSField(MapSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleLightNodes      (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfLightNodes,
             this->getType().getFieldDesc(LightNodesFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleLightNodes     (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfLightNodes,
             this->getType().getFieldDesc(LightNodesFieldId)));

    returnValue->setAddMethod(
        boost::bind(&ShadowViewport::pushToLightNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&ShadowViewport::removeFromLightNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ShadowViewport::removeObjFromLightNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&ShadowViewport::clearLightNodes,
                    static_cast<ShadowViewport *>(this)));

    editMField(LightNodesFieldMask, _mfLightNodes);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleExcludeNodes    (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfExcludeNodes,
             this->getType().getFieldDesc(ExcludeNodesFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleExcludeNodes   (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfExcludeNodes,
             this->getType().getFieldDesc(ExcludeNodesFieldId)));

    returnValue->setAddMethod(
        boost::bind(&ShadowViewport::pushToExcludeNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&ShadowViewport::removeFromExcludeNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ShadowViewport::removeObjFromExcludeNodes,
                    static_cast<ShadowViewport *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&ShadowViewport::clearExcludeNodes,
                    static_cast<ShadowViewport *>(this)));

    editMField(ExcludeNodesFieldMask, _mfExcludeNodes);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleMapAutoUpdate   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfMapAutoUpdate,
             this->getType().getFieldDesc(MapAutoUpdateFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleMapAutoUpdate  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfMapAutoUpdate,
             this->getType().getFieldDesc(MapAutoUpdateFieldId)));


    editSField(MapAutoUpdateFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleShadowMode      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfShadowMode,
             this->getType().getFieldDesc(ShadowModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleShadowMode     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfShadowMode,
             this->getType().getFieldDesc(ShadowModeFieldId)));


    editSField(ShadowModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleShadowSmoothness (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShadowSmoothness,
             this->getType().getFieldDesc(ShadowSmoothnessFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleShadowSmoothness(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShadowSmoothness,
             this->getType().getFieldDesc(ShadowSmoothnessFieldId)));


    editSField(ShadowSmoothnessFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleShadowOn        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShadowOn,
             this->getType().getFieldDesc(ShadowOnFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleShadowOn       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShadowOn,
             this->getType().getFieldDesc(ShadowOnFieldId)));


    editSField(ShadowOnFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleAutoSearchForLights (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAutoSearchForLights,
             this->getType().getFieldDesc(AutoSearchForLightsFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleAutoSearchForLights(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAutoSearchForLights,
             this->getType().getFieldDesc(AutoSearchForLightsFieldId)));


    editSField(AutoSearchForLightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleGlobalShadowIntensity (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfGlobalShadowIntensity,
             this->getType().getFieldDesc(GlobalShadowIntensityFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleGlobalShadowIntensity(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfGlobalShadowIntensity,
             this->getType().getFieldDesc(GlobalShadowIntensityFieldId)));


    editSField(GlobalShadowIntensityFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleFboOn           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFboOn,
             this->getType().getFieldDesc(FboOnFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleFboOn          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFboOn,
             this->getType().getFieldDesc(FboOnFieldId)));


    editSField(FboOnFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleAutoExcludeTransparentNodes (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAutoExcludeTransparentNodes,
             this->getType().getFieldDesc(AutoExcludeTransparentNodesFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleAutoExcludeTransparentNodes(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAutoExcludeTransparentNodes,
             this->getType().getFieldDesc(AutoExcludeTransparentNodesFieldId)));


    editSField(AutoExcludeTransparentNodesFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleDisableOccludedLights (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDisableOccludedLights,
             this->getType().getFieldDesc(DisableOccludedLightsFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleDisableOccludedLights(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDisableOccludedLights,
             this->getType().getFieldDesc(DisableOccludedLightsFieldId)));


    editSField(DisableOccludedLightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleRed             (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfRed,
             this->getType().getFieldDesc(RedFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleRed            (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfRed,
             this->getType().getFieldDesc(RedFieldId)));


    editSField(RedFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleBlue            (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfBlue,
             this->getType().getFieldDesc(BlueFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleBlue           (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfBlue,
             this->getType().getFieldDesc(BlueFieldId)));


    editSField(BlueFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleGreen           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGreen,
             this->getType().getFieldDesc(GreenFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleGreen          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGreen,
             this->getType().getFieldDesc(GreenFieldId)));


    editSField(GreenFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowViewportBase::getHandleAlpha           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAlpha,
             this->getType().getFieldDesc(AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr ShadowViewportBase::editHandleAlpha          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAlpha,
             this->getType().getFieldDesc(AlphaFieldId)));


    editSField(AlphaFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShadowViewportBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShadowViewport *pThis = static_cast<ShadowViewport *>(this);

    pThis->execSync(static_cast<ShadowViewport *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShadowViewportBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShadowViewport *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShadowViewport *>(pRefAspect),
                  dynamic_cast<const ShadowViewport *>(this));

    return returnValue;
}
#endif

void ShadowViewportBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShadowViewport *>(this)->setSceneRoot(NULL);

    static_cast<ShadowViewport *>(this)->clearLightNodes();

    static_cast<ShadowViewport *>(this)->clearExcludeNodes();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ShadowViewport *>::_type("ShadowViewportPtr", "StereoBufferViewportPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ShadowViewport *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShadowViewport *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShadowViewport *,
                           0);

OSG_END_NAMESPACE
