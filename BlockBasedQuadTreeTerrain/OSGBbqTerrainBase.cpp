/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BbqTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBBQTERRAININST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGNode.h> // Beacon Class

#include "OSGBbqTerrainBase.h"
#include "OSGBbqTerrain.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::BbqTerrain
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var NodePtr         BbqTerrainBase::_sfBeacon
    
*/


void BbqTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(),
        "beacon",
        "",
        BeaconFieldId, BeaconFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&BbqTerrainBase::editHandleBeacon),
        static_cast<FieldGetMethodSig >(&BbqTerrainBase::getHandleBeacon));

    oType.addInitialDesc(pDesc);
}


BbqTerrainBase::TypeObject BbqTerrainBase::_type(
    BbqTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &BbqTerrainBase::createEmpty,
    BbqTerrain::initMethod,
    BbqTerrain::exitMethod,
    (InitalInsertDescFunc) &BbqTerrainBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"BbqTerrain\"\n"
    "    parent=\"StageDrawable\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    library=\"Drawable\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"beacon\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BbqTerrainBase::getType(void)
{
    return _type;
}

const FieldContainerType &BbqTerrainBase::getType(void) const
{
    return _type;
}

UInt32 BbqTerrainBase::getContainerSize(void) const
{
    return sizeof(BbqTerrain);
}

/*------------------------- decorator get ------------------------------*/


//! Get the BbqTerrain::_sfBeacon field.
const SFNodePtr *BbqTerrainBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}





/*------------------------------ access -----------------------------------*/

UInt32 BbqTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }

    return returnValue;
}

void BbqTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
}

void BbqTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
}

//! create a new instance of the class
BbqTerrainPtr BbqTerrainBase::create(void)
{
    BbqTerrainPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<BbqTerrain::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
BbqTerrainPtr BbqTerrainBase::createEmpty(void)
{
    BbqTerrainPtr returnValue;

    newPtr<BbqTerrain>(returnValue);

    return returnValue;
}

FieldContainerPtr BbqTerrainBase::shallowCopy(void) const
{
    BbqTerrainPtr returnValue;

    newPtr(returnValue, dynamic_cast<const BbqTerrain *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

BbqTerrainBase::BbqTerrainBase(void) :
    Inherited(),
    _sfBeacon                 (NodePtr(NullFC))
{
}

BbqTerrainBase::BbqTerrainBase(const BbqTerrainBase &source) :
    Inherited(source),
    _sfBeacon                 (NullFC)
{
}


/*-------------------------- destructors ----------------------------------*/

BbqTerrainBase::~BbqTerrainBase(void)
{
}

void BbqTerrainBase::onCreate(const BbqTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setBeacon(source->getBeacon());
    }
}

GetFieldHandlePtr BbqTerrainBase::getHandleBeacon          (void) const
{
    SFNodePtr::GetHandlePtr returnValue(
        new  SFNodePtr::GetHandle(
             &_sfBeacon, 
             this->getType().getFieldDesc(BeaconFieldId)));

    return returnValue;
}

EditFieldHandlePtr BbqTerrainBase::editHandleBeacon         (void)
{
    SFNodePtr::EditHandlePtr returnValue(
        new  SFNodePtr::EditHandle(
             &_sfBeacon, 
             this->getType().getFieldDesc(BeaconFieldId)));

    returnValue->setSetMethod(boost::bind(&BbqTerrain::setBeacon, 
                                          static_cast<BbqTerrain *>(this), _1));

    editSField(BeaconFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BbqTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<BbqTerrainBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr BbqTerrainBase::createAspectCopy(void) const
{
    BbqTerrainPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const BbqTerrain *>(this));

    return returnValue;
}
#endif

void BbqTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<BbqTerrain *>(this)->setBeacon(NullFC);


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BbqTerrainPtr>::_type("BbqTerrainPtr", "StageDrawablePtr");
#endif


OSG_END_NAMESPACE
