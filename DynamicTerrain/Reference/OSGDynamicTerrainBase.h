/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2002 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DynamicTerrain
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDYNAMICTERRAINBASE_H_
#define _OSGDYNAMICTERRAINBASE_H_
#ifdef __sgi
#pragma once
#endif


#include <OSGAddOnsConfig.h>
#include <OSGContribDef.h>

#include <OSGBaseTypes.h>
#include <OSGRefPtr.h>
#include <OSGCoredNodePtr.h>

#include <OSGMaterialDrawable.h> // Parent

#include <OSGInt32Fields.h> // LevelSize type
#include <OSGImageFields.h> // HeightData type
#include <OSGReal32Fields.h> // HeightDataScale type
#include <OSGReal32Fields.h> // HeightDataOffset type
#include <OSGReal32Fields.h> // SampleDistance type
#include <OSGImageFields.h> // TextureData type
#include <OSGTextureChunkFields.h> // HeightColorTexture type
#include <OSGInt32Fields.h> // SampleUpdateBudget type
#include <OSGBoolFields.h> // EnableFrustumCulling type
#include <OSGBoolFields.h> // UseGpuRenderer type
#include <OSGBoolFields.h> // UseVboExtension type
#include <OSGBoolFields.h> // EnableSmoothTransition type
#include <OSGBoolFields.h> // ShowBoundingBoxes type
#include <OSGBoolFields.h> // ShowTransitionRegions type
#include <OSGBoolFields.h> // DisableUpdate type
#include <OSGStringFields.h> // CpuVertexProgram type
#include <OSGStringFields.h> // CpuFragmentProgram type

#include <OSGDynamicTerrainFields.h>

OSG_BEGIN_NAMESPACE

class DynamicTerrain;
class BinaryDataHandler;

//! \brief DynamicTerrain Base Class.

class OSG_CONTRIBLIB_DLLMAPPING DynamicTerrainBase : public MaterialDrawable
{
  private:

    typedef MaterialDrawable    Inherited;

    /*==========================  PUBLIC  =================================*/
  public:

    typedef DynamicTerrainPtr  Ptr;

    enum
    {
        LevelSizeFieldId              = Inherited::NextFieldId,
        HeightDataFieldId             = LevelSizeFieldId              + 1,
        HeightDataScaleFieldId        = HeightDataFieldId             + 1,
        HeightDataOffsetFieldId       = HeightDataScaleFieldId        + 1,
        SampleDistanceFieldId         = HeightDataOffsetFieldId       + 1,
        TextureDataFieldId            = SampleDistanceFieldId         + 1,
        HeightColorTextureFieldId     = TextureDataFieldId            + 1,
        SampleUpdateBudgetFieldId     = HeightColorTextureFieldId     + 1,
        EnableFrustumCullingFieldId   = SampleUpdateBudgetFieldId     + 1,
        UseGpuRendererFieldId         = EnableFrustumCullingFieldId   + 1,
        UseVboExtensionFieldId        = UseGpuRendererFieldId         + 1,
        EnableSmoothTransitionFieldId = UseVboExtensionFieldId        + 1,
        ShowBoundingBoxesFieldId      = EnableSmoothTransitionFieldId + 1,
        ShowTransitionRegionsFieldId  = ShowBoundingBoxesFieldId      + 1,
        DisableUpdateFieldId          = ShowTransitionRegionsFieldId  + 1,
        CpuVertexProgramFieldId       = DisableUpdateFieldId          + 1,
        CpuFragmentProgramFieldId     = CpuVertexProgramFieldId       + 1,
        NextFieldId                   = CpuFragmentProgramFieldId     + 1
    };

    static const OSG::BitVector LevelSizeFieldMask;
    static const OSG::BitVector HeightDataFieldMask;
    static const OSG::BitVector HeightDataScaleFieldMask;
    static const OSG::BitVector HeightDataOffsetFieldMask;
    static const OSG::BitVector SampleDistanceFieldMask;
    static const OSG::BitVector TextureDataFieldMask;
    static const OSG::BitVector HeightColorTextureFieldMask;
    static const OSG::BitVector SampleUpdateBudgetFieldMask;
    static const OSG::BitVector EnableFrustumCullingFieldMask;
    static const OSG::BitVector UseGpuRendererFieldMask;
    static const OSG::BitVector UseVboExtensionFieldMask;
    static const OSG::BitVector EnableSmoothTransitionFieldMask;
    static const OSG::BitVector ShowBoundingBoxesFieldMask;
    static const OSG::BitVector ShowTransitionRegionsFieldMask;
    static const OSG::BitVector DisableUpdateFieldMask;
    static const OSG::BitVector CpuVertexProgramFieldMask;
    static const OSG::BitVector CpuFragmentProgramFieldMask;


    static const OSG::BitVector MTInfluenceMask;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static        FieldContainerType &getClassType    (void); 
    static        UInt32              getClassTypeId  (void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType  (void); 
    virtual const FieldContainerType &getType  (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


           SFInt32             *editSFLevelSize      (void);
     const SFInt32             *getSFLevelSize      (void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFLevelSize      (void);
#endif

           SFImagePtr          *editSFHeightData     (void);
     const SFImagePtr          *getSFHeightData     (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFHeightData     (void);
#endif

           SFReal32            *editSFHeightDataScale(void);
     const SFReal32            *getSFHeightDataScale(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFHeightDataScale(void);
#endif

           SFReal32            *editSFHeightDataOffset(void);
     const SFReal32            *getSFHeightDataOffset(void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFHeightDataOffset(void);
#endif

           SFReal32            *editSFSampleDistance (void);
     const SFReal32            *getSFSampleDistance (void) const;
#ifndef OSG_2_PREP
           SFReal32            *getSFSampleDistance (void);
#endif

           SFImagePtr          *editSFTextureData    (void);
     const SFImagePtr          *getSFTextureData    (void) const;
#ifndef OSG_2_PREP
           SFImagePtr          *getSFTextureData    (void);
#endif

           SFTextureChunkPtr   *editSFHeightColorTexture(void);
     const SFTextureChunkPtr   *getSFHeightColorTexture(void) const;
#ifndef OSG_2_PREP
           SFTextureChunkPtr   *getSFHeightColorTexture(void);
#endif

           SFInt32             *editSFSampleUpdateBudget(void);
     const SFInt32             *getSFSampleUpdateBudget(void) const;
#ifndef OSG_2_PREP
           SFInt32             *getSFSampleUpdateBudget(void);
#endif

           SFBool              *editSFEnableFrustumCulling(void);
     const SFBool              *getSFEnableFrustumCulling(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFEnableFrustumCulling(void);
#endif

           SFBool              *editSFUseGpuRenderer (void);
     const SFBool              *getSFUseGpuRenderer (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFUseGpuRenderer (void);
#endif

           SFBool              *editSFUseVboExtension(void);
     const SFBool              *getSFUseVboExtension(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFUseVboExtension(void);
#endif

           SFBool              *editSFEnableSmoothTransition(void);
     const SFBool              *getSFEnableSmoothTransition(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFEnableSmoothTransition(void);
#endif

           SFBool              *editSFShowBoundingBoxes(void);
     const SFBool              *getSFShowBoundingBoxes(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFShowBoundingBoxes(void);
#endif

           SFBool              *editSFShowTransitionRegions(void);
     const SFBool              *getSFShowTransitionRegions(void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFShowTransitionRegions(void);
#endif

           SFBool              *editSFDisableUpdate  (void);
     const SFBool              *getSFDisableUpdate  (void) const;
#ifndef OSG_2_PREP
           SFBool              *getSFDisableUpdate  (void);
#endif

           SFString            *editSFCpuVertexProgram(void);
     const SFString            *getSFCpuVertexProgram(void) const;
#ifndef OSG_2_PREP
           SFString            *getSFCpuVertexProgram(void);
#endif

           SFString            *editSFCpuFragmentProgram(void);
     const SFString            *getSFCpuFragmentProgram(void) const;
#ifndef OSG_2_PREP
           SFString            *getSFCpuFragmentProgram(void);
#endif


           Int32               &editLevelSize      (void);
     const Int32               &getLevelSize      (void) const;
#ifndef OSG_2_PREP
           Int32               &getLevelSize      (void);
#endif

           ImagePtr            &editHeightData     (void);
     const ImagePtr            &getHeightData     (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getHeightData     (void);
#endif

           Real32              &editHeightDataScale(void);
     const Real32              &getHeightDataScale(void) const;
#ifndef OSG_2_PREP
           Real32              &getHeightDataScale(void);
#endif

           Real32              &editHeightDataOffset(void);
     const Real32              &getHeightDataOffset(void) const;
#ifndef OSG_2_PREP
           Real32              &getHeightDataOffset(void);
#endif

           Real32              &editSampleDistance (void);
     const Real32              &getSampleDistance (void) const;
#ifndef OSG_2_PREP
           Real32              &getSampleDistance (void);
#endif

           ImagePtr            &editTextureData    (void);
     const ImagePtr            &getTextureData    (void) const;
#ifndef OSG_2_PREP
           ImagePtr            &getTextureData    (void);
#endif

           TextureChunkPtr     &editHeightColorTexture(void);
     const TextureChunkPtr     &getHeightColorTexture(void) const;
#ifndef OSG_2_PREP
           TextureChunkPtr     &getHeightColorTexture(void);
#endif

           Int32               &editSampleUpdateBudget(void);
     const Int32               &getSampleUpdateBudget(void) const;
#ifndef OSG_2_PREP
           Int32               &getSampleUpdateBudget(void);
#endif

           bool                &editEnableFrustumCulling(void);
     const bool                &getEnableFrustumCulling(void) const;
#ifndef OSG_2_PREP
           bool                &getEnableFrustumCulling(void);
#endif

           bool                &editUseGpuRenderer (void);
     const bool                &getUseGpuRenderer (void) const;
#ifndef OSG_2_PREP
           bool                &getUseGpuRenderer (void);
#endif

           bool                &editUseVboExtension(void);
     const bool                &getUseVboExtension(void) const;
#ifndef OSG_2_PREP
           bool                &getUseVboExtension(void);
#endif

           bool                &editEnableSmoothTransition(void);
     const bool                &getEnableSmoothTransition(void) const;
#ifndef OSG_2_PREP
           bool                &getEnableSmoothTransition(void);
#endif

           bool                &editShowBoundingBoxes(void);
     const bool                &getShowBoundingBoxes(void) const;
#ifndef OSG_2_PREP
           bool                &getShowBoundingBoxes(void);
#endif

           bool                &editShowTransitionRegions(void);
     const bool                &getShowTransitionRegions(void) const;
#ifndef OSG_2_PREP
           bool                &getShowTransitionRegions(void);
#endif

           bool                &editDisableUpdate  (void);
     const bool                &getDisableUpdate  (void) const;
#ifndef OSG_2_PREP
           bool                &getDisableUpdate  (void);
#endif

           std::string         &editCpuVertexProgram(void);
     const std::string         &getCpuVertexProgram(void) const;
#ifndef OSG_2_PREP
           std::string         &getCpuVertexProgram(void);
#endif

           std::string         &editCpuFragmentProgram(void);
     const std::string         &getCpuFragmentProgram(void) const;
#ifndef OSG_2_PREP
           std::string         &getCpuFragmentProgram(void);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setLevelSize      ( const Int32 &value );
     void setHeightData     ( const ImagePtr &value );
     void setHeightDataScale( const Real32 &value );
     void setHeightDataOffset( const Real32 &value );
     void setSampleDistance ( const Real32 &value );
     void setTextureData    ( const ImagePtr &value );
     void setHeightColorTexture( const TextureChunkPtr &value );
     void setSampleUpdateBudget( const Int32 &value );
     void setEnableFrustumCulling( const bool &value );
     void setUseGpuRenderer ( const bool &value );
     void setUseVboExtension( const bool &value );
     void setEnableSmoothTransition( const bool &value );
     void setShowBoundingBoxes( const bool &value );
     void setShowTransitionRegions( const bool &value );
     void setDisableUpdate  ( const bool &value );
     void setCpuVertexProgram( const std::string &value );
     void setCpuFragmentProgram( const std::string &value );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (const BitVector         &whichField);
    virtual void   copyToBin  (      BinaryDataHandler &pMem,
                               const BitVector         &whichField);
    virtual void   copyFromBin(      BinaryDataHandler &pMem,
                               const BitVector         &whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DynamicTerrainPtr      create          (void); 
    static  DynamicTerrainPtr      createEmpty     (void); 

    /*! \}                                                                 */

    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr     shallowCopy     (void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/
  protected:

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFInt32             _sfLevelSize;
    SFImagePtr          _sfHeightData;
    SFReal32            _sfHeightDataScale;
    SFReal32            _sfHeightDataOffset;
    SFReal32            _sfSampleDistance;
    SFImagePtr          _sfTextureData;
    SFTextureChunkPtr   _sfHeightColorTexture;
    SFInt32             _sfSampleUpdateBudget;
    SFBool              _sfEnableFrustumCulling;
    SFBool              _sfUseGpuRenderer;
    SFBool              _sfUseVboExtension;
    SFBool              _sfEnableSmoothTransition;
    SFBool              _sfShowBoundingBoxes;
    SFBool              _sfShowTransitionRegions;
    SFBool              _sfDisableUpdate;
    SFString            _sfCpuVertexProgram;
    SFString            _sfCpuFragmentProgram;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DynamicTerrainBase(void);
    DynamicTerrainBase(const DynamicTerrainBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DynamicTerrainBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#if !defined(OSG_FIXED_MFIELDSYNC)
    void executeSyncImpl(      DynamicTerrainBase *pOther,
                         const BitVector         &whichField);

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField);
#else
    void executeSyncImpl(      DynamicTerrainBase *pOther,
                         const BitVector         &whichField,
                         const SyncInfo          &sInfo     );

    virtual void   executeSync(      FieldContainer    &other,
                               const BitVector         &whichField,
                               const SyncInfo          &sInfo);

    virtual void execBeginEdit     (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

            void execBeginEditImpl (const BitVector &whichField,
                                          UInt32     uiAspect,
                                          UInt32     uiContainerSize);

    virtual void onDestroyAspect(UInt32 uiId, UInt32 uiAspect);
#endif

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/
  private:

    friend class FieldContainer;

    static FieldDescription   *_desc[];
    static FieldContainerType  _type;


    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DynamicTerrainBase &source);
};

//---------------------------------------------------------------------------
//   Exported Types
//---------------------------------------------------------------------------


typedef DynamicTerrainBase *DynamicTerrainBaseP;

typedef osgIF<DynamicTerrainBase::isNodeCore,
              CoredNodePtr<DynamicTerrain>,
              FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC
              >::_IRet DynamicTerrainNodePtr;

typedef RefPtr<DynamicTerrainPtr> DynamicTerrainRefPtr;

OSG_END_NAMESPACE

#define OSGDYNAMICTERRAINBASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h,v 1.42 2008/06/09 12:26:59 vossg Exp $"

#endif /* _OSGDYNAMICTERRAINBASE_H_ */
