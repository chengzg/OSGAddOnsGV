# PyOpenSG is (C) Copyright 2005-2009 by Allen Bierbaum
#
# This file is part of PyOpenSG.
#
# PyOpenSG is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# PyOpenSG is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# This script is derived from gen_bindings.py, it contains all class specific
# tasks for the OSGBaseLib for the integration with the OpenSG CMake system
# (GV)
#

from goodies import *

import pygccxml.declarations as pd

import pyplusplus.function_transformers as FT

import osggen
import settings
import splitGenHelper

# Holds the names of already exported typed multi-fields. Used in
# wrapMFReturnTypes()
exported_mfields = []

def wrapMFReturnTypes(class_decl):
  """
  Checks if the given class declaration contains methods that return typed
  multi-fields. In that case the multi-field is wrapped with the
  mfedit_indexing_suite helper, bases on the vector_indexing_suite.
  """

  global exported_mfields

  class_decl.add_declaration_code('#include "mfedit_indexing_suite.hpp"')

  member_names = class_decl.get_members()

  class_decl.add_registration_code('\n// Exposing value multi-fields with the help of a customixed mfedit_indexing_suite:\n\n',
                                    works_on_instance = False)

  idx = 0
  for member in member_names:
    decls = class_decl[member.name]
    for decl in decls:
      #print('Checking for multi-field return type: ' + str(decl.name))
      if type(decl).__name__ == 'member_function_t':
        return_name = decl.return_type.decl_string
        if return_name.startswith('::OSG::MField<') == True:

          #print('    ... processing: ' + return_name)
          mftype = decl.return_type.decl_string.lstrip('::').rstrip('const *')

          # TODO: extract typedef'd name and use it for the exported type.
          #       Currently the name is 'MField_' + str(idx). Well...
          # short_name = ...

          #print('Checking: ' + str(mftype))
          if mftype in exported_mfields:
            # already exported
            #print('   already exported...')
            continue
          else:
            #print('    add to exported_mfields')
            exported_mfields.append(mftype)

          print('    Using indexing suite on type: ' + mftype)

          code = '\nbp::class_<' + mftype + ' >("MField_' + str(idx) + '")\n\t.def(bp::mfedit_indexing_suite<' + mftype + ' >());\n'
          #print('    code:' + code)
          class_decl.add_registration_code(code, works_on_instance = False)
          idx += 1

def wrapPyIteratorInterface(class_decl):
  """
  Takes a class and exports its iter(), getitem(), setitem() and len() methods
  to their python iterator interface representation with the double underscore
  pre- and suffix. Reason being is that Py++ does not export methods with double
  underscore pre- and suffix automatically.

  To use this wrapper the given class has to provide the iter(), getitem(),
  setitem() and len() methods. Otherwise an exception is thrown.
  """
  for decl in class_decl['iter']:
    decl.alias = '__iter__'
  for decl in class_decl['getitem']:
    decl.alias = '__getitem__'
  for decl in class_decl['setitem']:
    decl.alias = '__setitem__'
  for decl in class_decl['len']:
    decl.alias = '__len__'

def preScanSetup(gen_classes, fc_infos, core_mods, free_funcs, free_func_mods, exc_types):

  return

def excludeFCDSetup(opensg_src_dir, fc_ignore_list, skip_fcds):

  return


cmh_ncsd_temp         = None
ftm_cmh_ncsd_temp     = None
dfc_ftm_cmh_ncsd_temp = None
sp_temp               = None

def genTemplatesSetup(template_builder, tbuilder, non_fc_template_instances):

  global cmh_ncsd_temp
  global ftm_cmh_ncsd_temp
  global dfc_ftm_cmh_ncsd_temp
  global sp_temp

  cmh_ncsd_temp         = tbuilder.Template("OSG::ContainerMixinHead<OSG::NodeCoreScriptDesc>",
                                            "ContainerMixinHeadNodeCoreScriptDesc")
  ftm_cmh_ncsd_temp     = tbuilder.Template("OSG::FrameTaskMixin<OSG::ContainerMixinHead<OSG::NodeCoreScriptDesc> >",
                                            "FrameTaskMixinContainerMixinHeadNodeCoreScriptDesc")
  dfc_ftm_cmh_ncsd_temp = tbuilder.Template("OSG::DynFieldContainer<OSG::FrameTaskMixin<OSG::ContainerMixinHead<OSG::NodeCoreScriptDesc> > >",
                                            "DynFieldContainerFrameTaskMixinContainerMixinHeadNodeCoreScriptDesc")
  sp_temp               = tbuilder.Template("OSG::ScriptParent", "ScriptParent")

  return



def postScanSetup(osg, template_alias_db):
  """
  Use this function to register custom code.
  """

  #----------------------------------------------------------------------------
  # Template instantiations:
  #----------------------------------------------------------------------------

  splitGenHelper.exposeTemplateType(cmh_ncsd_temp)
  splitGenHelper.exposeTemplateType(ftm_cmh_ncsd_temp)
  splitGenHelper.exposeTemplateType(dfc_ftm_cmh_ncsd_temp)
  splitGenHelper.exposeTemplateType(sp_temp)

  #----------------------------------------------------------------------------
  # PythonScript:
  #----------------------------------------------------------------------------

  sc = osg.class_("PythonScript")

  for decl in sc["getFinalType"]:
    #print "getFinalType", decl
    if is_const_ref(decl.return_type):
      decl.exclude()
    else:
      decl.call_policies = return_internal_reference()

  for decl in dfc_ftm_cmh_ncsd_temp.decl["getFinalType"]:
    #print "getFinalType TEMPLATE ", decl
    if is_const_ref(decl.return_type):
      decl.exclude()
    else:
      decl.call_policies = return_internal_reference()

  #----------------------------------------------------------------------------
  # ScriptBase:
  #----------------------------------------------------------------------------

  scbase = osg.class_("ScriptBase")

  # Expose static fields as properties:
  scbase.add_registration_code('add_property("Priority", &OSG::ScriptBase::getPriority, &OSG::ScriptBase::setPriority)')
  scbase.add_registration_code('add_property("Script", bp::make_function(&OSG::ScriptBase::getScript, bp::return_value_policy<bp::copy_const_reference>()), &OSG::ScriptBase::setScript)')

  # Expose static field masks. Masks for dynamically added fields are exposed
  # at runtime in PythonScript::addField().
  scbase.add_code('bp::scope().attr("PriorityFieldId")   = (int)OSG::ScriptBase::PriorityFieldId;', False, False)
  scbase.add_code('bp::scope().attr("PriorityFieldMask") = (int)OSG::TypeTraits<OSG::BitVector>::One << OSG::ScriptBase::PriorityFieldId;', False, False)

  scbase.add_code('bp::scope().attr("ScriptFieldId")   = (int)OSG::ScriptBase::ScriptFieldId;', False, False)
  scbase.add_code('bp::scope().attr("ScriptFieldMask") = (int)OSG::TypeTraits<OSG::BitVector>::One << OSG::ScriptBase::ScriptFieldId;', False, False)

  #----------------------------------------------------------------------------
  # PyFieldAccessHandler:
  #----------------------------------------------------------------------------

  wrapMFReturnTypes(osg.class_("PyFieldAccessHandler"))

  #class_decl.add_declaration_code('#include "mfedit_indexing_suite.hpp"')

  #idx = 0
  #members = class_decl.get_members()
  #fah.add_registration_code('\n// Exposing value multi-fields with the help of a customixed mfedit_indexing_suite:\n\n', works_on_instance = False)
  #for member in members:
  #  decls = fah[member.name]
  #  for decl in decls:
  #    print('Checking for multi-field return type: ' + str(decl.name))
  #    if decl.name.startswith('getValueMField') or decl.name.startswith('changeValueMField'):
  #      print('           return_type: ' + decl.return_type.decl_string)
  #      if decl.return_type.decl_string.startswith('::OSG::MField<') == True:
  #          mftype = decl.return_type.decl_string
  #          mftype = mftype.rstrip('const *')
  #          mftype = mftype.lstrip('::')
  #          print('    Using indexing suite on type: ' + mftype)
  #          code = '\nbp::class_<' + mftype + ' >("MField_' + str(idx) + '")\n\t.def(bp::mfedit_indexing_suite<' + mftype + ' >());\n'
  #          print('    code:' + code)
  #          fah.add_registration_code(code, works_on_instance = False)
  #          idx += 1

  return


def tempLookatPostScanSetup(osg):

  return


def postGenClassesSetup(osg, mb):

  return


def postFCDInfoSetup(osg, mb, adddition_exp):
  """
  Use this function to adjust the return policies of your class members.
  """

  #----------------------------------------------------------------------------
  # PyFieldAccessHandler:
  #----------------------------------------------------------------------------

  fah = osg.class_("PyFieldAccessHandler")

  members = fah.get_members()
  for member in members:
    declarations = fah[member.name]

    for decl in declarations:
      if decl.name.startswith('changeValueSField_') or \
         decl.name.startswith('changeValueMField_'):
        decl.call_policies = return_internal_reference()

      if decl.name.startswith('getValueMField_'):
        decl.ignore = False
        decl.call_policies = return_internal_reference()

  #----------------------------------------------------------------------------
  # PyFieldContainerPtrMFieldEditHandle
  #----------------------------------------------------------------------------

  wrapPyIteratorInterface(osg.class_('PyFieldContainerPtrMFieldEditHandle'))

  #----------------------------------------------------------------------------
  # PyFieldContainerPtrMFieldGetHandle
  #----------------------------------------------------------------------------

  wrapPyIteratorInterface(osg.class_('PyFieldContainerPtrMFieldGetHandle'))

  #return_type = decl.return_type.decl_string.lstrip('::OSG::')
  ##print('rettype: ' + return_type)
  #
  ## The following non-const references are returned as copies, as python
  ## does not support returning references to those.
  #constref_return_types = ('std::string &', 'bool &')
  #if return_type in constref_return_types:
  #    decl.call_policies = return_value_policy(copy_non_const_reference)
  #    print "    ... -> copy_non_const_reference"
  #    continue
  #
  ## These types map to integral C++ types. Python does not support to
  ## return them as references, so they are returned by value.
  #value_return_types = ['Real32', 'Real64', 'Int32', 'UInt32', 'Int64', \
  #                      'UInt64', 'Int64', 'Time']
  #if return_type in value_return_types:
  #    decl.call_policies = return_value_policy(return_by_value)
  #    print "    ... -> return_by_value"
  #    continue
  #
  ## The remaining methods return class types, which are returned as
  ## internal references.
